<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ajax两种封装]]></title>
    <url>%2F2019%2F08%2F22%2Fajax%E4%B8%A4%E7%A7%8D%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[ajax封装ajax+ES61234567891011121314151617181920212223242526272829303132333435function ajax(method,url,postStr,dataType=&quot;json&quot;)&#123; return new Promise((resolve,reject)=&gt;&#123; //1、获取 xhr var xhr = (function()&#123; if(window.XMLHttpRequest)&#123; return new XMLHttpRequest(); &#125;else&#123; return new ActiveXObject(&quot;Microsoft.XMLHttp&quot;); &#125; &#125;)(); //2、创建请求 xhr.open(method,url,true); //4、设置请求消息头 if(method==&quot;post&quot;)&#123; xhr.setRequestHeader( &quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;); &#125; //3、设置回调 xhr.onreadystatechange=function()&#123; if(xhr.readyState == 4) if(xhr.status == 200)&#123; if(url.indexOf(&quot;.php&quot;)!=-1 &amp;&amp;dataType.toLowerCase()==&quot;json&quot;)&#123; resolve(JSON.parse(xhr.responseText)); &#125;else&#123; resolve(xhr.responseText); &#125; &#125;else reject(&quot;ajax出错啦！&quot;+xhr.status); &#125; //5、发送 xhr.send(postStr); &#125;)&#125;ajax+ES6+axios1234567891011121314151617181920212223242526272829/** AJAX请求函数* */import axios from &apos;axios&apos;export default function ajax (url = &apos;&apos;,data = &#123;&#125;,type = &apos;GET&apos;)&#123; return new Promise(function (resolve,reject)&#123; let promise if(type === &apos;GET&apos;) &#123; let dataStar= &apos;&apos; Object.keys(data).forEach(key =&gt; &#123; dataStar += key + &apos;=&apos; + data[key] +&apos;&amp;&apos; &#125;) if (dataStar !== &apos;&apos;) &#123; dataStar = dataStar.substring(0,dataStar.lastIndexOf(&apos;&amp;&apos;)) url = url + &apos;?&apos; +dataStar &#125; promise = axios.get(url) &#125; else &#123; promise = axios.post(url,data) &#125; promise.then(response =&gt; &#123; resolve(response.data) &#125;) .catch (error =&gt; &#123; reject(error) &#125;) &#125;)&#125;]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>axios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[外卖项目开发流程]]></title>
    <url>%2F2019%2F08%2F22%2F%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[外卖Web APP（spa）项目开发流程1. 创建客户端项目1.1 使用 vue-cli(脚手架)搭建项目12345678#在Github新建Vue-MintShop项目,然后clone到本地git clone git@github.com:W-Qing/Vue-MintShop.gitcd Vue-MintShop#创建客户端项目vue init webpack mintshop-clientcd mintshop-clientnpm installnpm run dev 访问: localhost:80801.2 项目结构分析*MintShop-client *|– build : webpack 相关的配置文件夹(基本不需要修改)|– build : webpack 相关的配置文件夹(基本不需要修改)|– config: webpack 相关的配置文件夹(基本不需要修改)|– index.js: 指定的后台服务的端口号和静态资源文件夹|– node_modules|– src : 源码文件夹|– main.js: 应用入口 js （初始化vue实例并使用需要的插件 ）|– static: 静态资源文件夹|– .babelrc: babel 的配置文件|– .editorconfig: 通过编辑器的编码/格式进行一定的配置|– .eslintignore: eslint 检查忽略的配置|– .eslintrc.js: eslint 检查的配置|– .gitignore: git 版本管理忽略的配置|– index.html: 默认的主渲染页面文件|– package.json: 应用包配置文件|– README.md: 应用描述说明的 readme 文件1.3 编码测试与打包发布项目编码测试npm run dev访问: http://localhost:8080编码, 自动编译打包(HMR), 查看效果打包发布npm run buildnpm install -g serveserve dist访问: http://localhost:50002. 功能需求分析开发前应该首先完成功能模块的分析设计，这里我们可以直接运行项目查看功能演示 自己总结项目功能需求3. 开发资源准备使用阿里巴巴矢量库将想要的图标添加入库（购物车）将购物车中的图标添加到项目中生成项目图标的Font Class地址4. Css Reset、Fastclick与Stylus4.1 Css Reset在项目主目录下的static文件夹内新建css文件夹在css文件夹内新建重置样式文件reset.css在index.html 中引入1&lt;link rel="stylesheet" href="/static/css/reset.css"&gt;4.2 Fastclick当用户一次点击屏幕之后，浏览器并不能立刻判断用户是要进行双击缩放，还是想要进行单击操作。因此，iOS Safari 就等待 300 毫秒，以判断用户是否再次点击了屏幕。 于是，300 毫秒延迟就这么诞生了。安装fastclick库 解决点击响应延时 0.3s 问题1npm Install fastclick --save在main.js中引入，并绑定到body12import FastClick from 'fastclick'FastClick.attach(document.body);4.3 Stylus安装stylus依赖包1npm install stylus stylus-loader --save-dev在common文件夹下新建stylus文件夹在stylus文件加下面新建mixins.styl文件注意在组件内编写样式时要声明lang和rel1&lt;style lang="stylus" rel="stylesheet/stylus"&gt;5. 源码目录设计6. Vue组件化6.1 分析整个项目的 vue 组件结构src|– components————非路由组件文件夹|– FooterGuide—————底部组件文件夹|– FooterGuide.vue——–底部组件 vue|– pages—————–路由组件文件夹|– Msite—————首页组件文件夹|– Msite.vue——–首页组件 vue|– Search—————-搜索组件文件夹|– Search.vue———搜索组件 vue|– Order————–订单组件文件夹|– Order.vue——-订单组件 vue|– Profile————–个人组件文件夹|– Profile.vue——-个人组件 vue|– App.vue—————应用根组件 vue|– main.js—————应用入口 js页面底部的FooterGuide组件只是用来放pages里的组件的容器，所以它不是路由组件页面最上面的标题栏在我们的项目中属于路由组件的组成部分（与中间内容部分在一起）但每个路由组件中都有最顶部的组件且相似度很高，所以可以将其抽取成为一个单独的组件6.2 编写vue组件模板文件pages文件夹下的各个vue组件文件及App.vue和FooterGuide.vue都是这个初始空白模板12345678910&lt;template&gt; &lt;div&gt;App vue template&lt;/div&gt;&lt;/template&gt;&lt;script&gt; export default &#123;&#125;&lt;/script&gt;&lt;style lang=&quot;stylus&quot; rel=&quot;stylesheet/stylus&quot;&gt;&lt;/style&gt;7. 引入Vue-router###7.1 下载vue-router12#创建项目时已下载npm install vue-router --save7.2 编写router文件夹下的index.js123456789101112131415161718192021222324252627282930313233343536373839/* 路由模块 */import Vue from 'vue'import VueRouter from 'vue-router'// 引入路由组件文件夹下的组件import Msite from '../pages/Msite/Msite.vue'import Search from '../pages/Search/Search.vue'import Order from '../pages/Order/Order.vue'import Profile from '../pages/Profile/Profile.vue'// 全局注册Vue-router组件Vue.use(VueRouter)// 配置路由表并导出export default new VueRouter(&#123; //去掉地址中的哈希# mode: 'history', routes: [&#123; path: '/', redirect: '/msite' &#125;, &#123; path: '/msite', component: Msite, &#125;, &#123; path: '/search', component: Search, &#125;, &#123; path: '/order', component: Order, &#125;, &#123; path: '/profile', component: Profile, &#125; ]&#125;)7.3 编写应用的入口文件main.js123456789// 引入路由 其实就是引入上一步配置好的路由表import router from './router'new Vue(&#123; el: '#app', render: h =&gt; h(app), // 为根组件加入路由 router&#125;)7.4 在App.vue里使用router-view123456789101112131415161718192021222324252627&lt;template&gt; &lt;!-- 修改应用组件的模板 --&gt; &lt;div id=&quot;app&quot;&gt; &lt;!-- 设置路由组件的视图位置 --&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;!-- 并放置非路由组件 --&gt; &lt;FooterGuide&gt;&lt;/FooterGuide&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import FooterGuide from &apos;./components/FooterGuide/FooterGuide.vue&apos;// 引入底部组件并注册export default &#123; components: &#123; FooterGuide &#125;&#125;&lt;/script&gt;&lt;style lang=&quot;stylus&quot; rel=&quot;stylesheet/stylus&quot;&gt;// 整个应用组件的样式 #app width 100% height 100% background #f5f5f5&lt;/style&gt;App.vue里的根元素&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;与外层被注入框架index.html中的&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;是一致的index.html中的&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;是指定绑定目标为元素的根路径，而App.vue文件里的&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;则是提供注入绑定元素的内容，两者在运行时指的是同一个DOM元素7.5 运行并请求不同路由路径查看效果通过切换url地址里的hash值（miste/order/search/profile），页面会显示不同的路由模板内容。8. 编写组件代码8.1 FooterGuide组件功能及实现通过编程式导航实现路由的切换显示($router)通过动态 class 和$route.path 来实现 tab 样式切换通过阿里图标库, 显示导航图标代码123456789&lt;footer class="footer_guide border-1px"&gt; &lt;a href="javascript:;" class="guide_item on"&gt; &lt;span class="item_icon"&gt; &lt;i class="iconfont icon-food"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span&gt;外卖&lt;/span&gt; &lt;/a&gt; &lt;!--其他三部分类似--&gt;&lt;/footer&gt;1234567891011121314151617181920212223242526272829303132&lt;style lang="stylus" rel="stylesheet/stylus"&gt;/*引入公共样式*/@import "../../common/stylus/mixins.styl".footer_guide /*顶部有白色的边框*/ top-border-1px(#e4e4e4) position fixed z-index 100 left 0 right 0 bottom 0 background-color #fff width 100% height 50px display flex .guide_item display flex flex 1 text-align center flex-direction column align-items center margin 5px color #999999 &amp;.on color #02a774 span font-size 12px margin-top 2px margin-bottom 2px .iconfont font-size 22px&lt;/style&gt;此时，页面已达到理想效果。接着修改template模板，为其加入路由与样式的切换控制。1234567&lt;div class="guide_item" @click="goto('/msite')" :class="&#123;on: isCurrent('/msite')&#125;"&gt; &lt;span class="item_icon"&gt; &lt;i class="iconfont icon-food"&gt;&lt;/i&gt; &lt;/span&gt; &lt;span&gt;首页&lt;/span&gt;&lt;/div&gt;&lt;!--其他三个部分类似，只是路由不同--&gt;再补充相应的函数方法1234567891011export default &#123; methods: &#123; goto (path) &#123; this.$router.replace(path) &#125;, isCurrent (path) &#123; // console.log(this.$route.path) return this.$route.path === path &#125; &#125;&#125;至此，底部组件完成，可实现点击不同的选项切换不同的路由组件。8.2 各导航路由组件8.2.1 Msite组件功能区域划分最顶部的title标题栏部分上方的nav轮播区域商家列表展示区域图片资源Msite组件页面的轮播图及商家列表都需要用到一些图片资源文件，所以在msite.vue同级目录下新建images文件夹，以便放置各种不同类型的图片资源。代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107&lt;template&gt; &lt;section class=&quot;msite&quot;&gt; &lt;!--首页头部title--&gt; &lt;!--由msite_header改成header--&gt; &lt;header class=&quot;header&quot;&gt; &lt;span class=&quot;header_search&quot;&gt; &lt;i class=&quot;iconfont icon-sousuo&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class=&quot;header_title&quot;&gt; &lt;span class=&quot;header_title_text ellipsis&quot;&gt;芝罘区鲁东大学北区(青年南路)&lt;/span&gt; &lt;/span&gt; &lt;span class=&quot;header_login&quot;&gt; &lt;span class=&quot;header_login_text&quot;&gt;登录|注册&lt;/span&gt; &lt;/span&gt; &lt;/header&gt; &lt;!--首页导航轮播--&gt; &lt;nav class=&quot;msite_nav&quot;&gt; &lt;div class=&quot;swiper-container&quot;&gt; &lt;div class=&quot;swiper-wrapper&quot;&gt; &lt;div class=&quot;swiper-slide&quot;&gt; &lt;a href=&quot;javascript:&quot; class=&quot;link_to_food&quot;&gt; &lt;div class=&quot;food_container&quot;&gt; &lt;img src=&quot;./images/nav/1.jpg&quot;&gt; &lt;/div&gt; &lt;span&gt;甜品饮品&lt;/span&gt; &lt;/a&gt; &lt;a href=&quot;javascript:&quot; class=&quot;link_to_food&quot;&gt; &lt;div class=&quot;food_container&quot;&gt; &lt;img src=&quot;./images/nav/2.jpg&quot;&gt; &lt;/div&gt; &lt;span&gt;商超便利&lt;/span&gt; &lt;/a&gt; &lt;!--下面的图片省略--&gt; &lt;/div&gt; &lt;div class=&quot;swiper-slide&quot;&gt; &lt;a href=&quot;javascript:&quot; class=&quot;link_to_food&quot;&gt; &lt;div class=&quot;food_container&quot;&gt; &lt;img src=&quot;./images/nav/9.jpg&quot;&gt; &lt;/div&gt; &lt;span&gt;甜品饮品&lt;/span&gt; &lt;/a&gt; &lt;!--同样省略--&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 轮播图页码 --&gt; &lt;div class=&quot;swiper-pagination&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/nav&gt; &lt;!--首页附近商家列表--&gt; &lt;div class=&quot;msite_shop_list&quot;&gt; &lt;div class=&quot;shop_header&quot;&gt; &lt;i class=&quot;iconfont icon-xuanxiang&quot;&gt;&lt;/i&gt; &lt;span class=&quot;shop_header_title&quot;&gt;附近商家&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;shop_container&quot;&gt; &lt;ul class=&quot;shop_list&quot;&gt; &lt;li class=&quot;shop_li border-1px&quot;&gt; &lt;a&gt; &lt;div class=&quot;shop_left&quot;&gt; &lt;img class=&quot;shop_img&quot; src=&quot;./images/shop/1.jpg&quot;&gt; &lt;/div&gt; &lt;div class=&quot;shop_right&quot;&gt; &lt;section class=&quot;shop_detail_header&quot;&gt; &lt;h4 class=&quot;shop_title ellipsis&quot;&gt;锄禾日当午，汗滴禾下土&lt;/h4&gt; &lt;ul class=&quot;shop_detail_ul&quot;&gt; &lt;li class=&quot;supports&quot;&gt;保&lt;/li&gt; &lt;li class=&quot;supports&quot;&gt;准&lt;/li&gt; &lt;li class=&quot;supports&quot;&gt;票&lt;/li&gt; &lt;/ul&gt; &lt;/section&gt; &lt;section class=&quot;shop_rating_order&quot;&gt; &lt;section class=&quot;shop_rating_order_left&quot;&gt; &lt;div class=&quot;star star-24&quot;&gt; &lt;span class=&quot;star-item on&quot;&gt;&lt;/span&gt; &lt;span class=&quot;star-item on&quot;&gt;&lt;/span&gt; &lt;span class=&quot;star-item on&quot;&gt;&lt;/span&gt; &lt;span class=&quot;star-item half&quot;&gt;&lt;/span&gt; &lt;span class=&quot;star-item off&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;rating_section&quot;&gt; 3.6 &lt;/div&gt; &lt;div class=&quot;order_section&quot;&gt; 月售106单 &lt;/div&gt; &lt;/section&gt; &lt;section class=&quot;shop_rating_order_right&quot;&gt; &lt;span class=&quot;delivery_style delivery_right&quot;&gt;硅谷专送&lt;/span&gt; &lt;/section&gt; &lt;/section&gt; &lt;section class=&quot;shop_distance&quot;&gt; &lt;p class=&quot;shop_delivery_msg&quot;&gt; &lt;span&gt;¥20起送&lt;/span&gt; &lt;span class=&quot;segmentation&quot;&gt;/&lt;/span&gt; &lt;span&gt;配送费约¥5&lt;/span&gt; &lt;/p&gt; &lt;/section&gt; &lt;/div&gt; &lt;/a&gt; &lt;/li&gt; &lt;!--省略其他店铺展示--&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt;&lt;/template&gt;&lt;!--省略js--&gt;要注意首页的头部标题部分的样式，在其他的组件中都可以进行重用。所以将header标签的类名由msite_header改成header。接下来在其他组件中可以直接使用（当然header里的部分样式其他组件用不到，到时再进一步抽取公共的css样式。）123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;style lang="stylus" rel="stylesheet/stylus"&gt; @import "../../common/stylus/mixins.styl" .msite //首页 width 100% .header background-color #02a774 position fixed z-index 100 left 0 top 0 width 100% height 45px .header_search position absolute left 15px top 50% transform translateY(-50%) width 10% height 50% .icon-sousuo font-size 25px color #fff .header_title position absolute top 50% left 50% transform translate(-50%, -50%) width 50% color #fff text-align center .header_title_text font-size 20px color #fff display block .header_login font-size 14px color #fff position absolute right 15px top 50% transform translateY(-50%) .header_login_text color #fff /*下面的样式省略*/&lt;/style&gt;接下来的几个路由组件都类似，都是先修改template模版，然后引入mixins.styl 样式文件和上面提到的公共的header部分的样式。8.2.2 Search组件12345678910111213&lt;section class=&quot;search&quot;&gt; &lt;header class=&quot;header&quot;&gt; &lt;div class=&quot;header_title&quot;&gt; &lt;span class=&quot;header_title_text&quot;&gt;搜索&lt;/span&gt; &lt;/div&gt; &lt;/header&gt; &lt;form class=&quot;search_form&quot; action=&quot;#&quot;&gt; &lt;input type=&quot;search&quot; name=&quot;search&quot; placeholder=&quot;请输入商家或美食名称&quot; class=&quot;search_input&quot;&gt; &lt;input type=&quot;submit&quot; class=&quot;search_submit&quot;&gt; &lt;/form&gt;&lt;/section&gt;&lt;!--省略js与style--&gt;8.2.3 Order组件在order.vue同级目录下新建images文件夹，再新建order文件夹，存放订单组件用到的图片资源。123456789101112131415&lt;div&gt; &lt;section class=&quot;order&quot;&gt; &lt;header class=&quot;header&quot;&gt; &lt;a class=&quot;header_title&quot;&gt; &lt;span class=&quot;header_title_text&quot;&gt;订单列表&lt;/span&gt; &lt;/a&gt; &lt;/header&gt; &lt;section class=&quot;order_no_login&quot;&gt; &lt;img src=&quot;./images/order/person.png&quot;&gt; &lt;h3&gt;登录后查看外卖订单&lt;/h3&gt; &lt;button&gt;立即登陆&lt;/button&gt; &lt;/section&gt; &lt;/section&gt;&lt;/div&gt;&lt;!--省略js与style--&gt;8.2.4 Profile组件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697&lt;div&gt; &lt;section class=&quot;profile&quot;&gt; &lt;header class=&quot;header&quot;&gt; &lt;a class=&quot;header_title&quot;&gt; &lt;span class=&quot;header_title_text&quot;&gt;我的&lt;/span&gt; &lt;/a&gt; &lt;/header&gt; &lt;section class=&quot;profile-number&quot;&gt; &lt;a href=&quot;javascript:&quot; class=&quot;profile-link&quot;&gt; &lt;div class=&quot;profile_image&quot;&gt; &lt;i class=&quot;iconfont icon-yonghuming&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;div class=&quot;user-info&quot;&gt; &lt;p class=&quot;user-info-top&quot;&gt;登录/注册&lt;/p&gt; &lt;p&gt; &lt;span class=&quot;user-icon&quot;&gt; &lt;i class=&quot;iconfont icon-msnui-tel icon-mobile&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class=&quot;icon-mobile-number&quot;&gt;暂无绑定手机号&lt;/span&gt; &lt;/p&gt; &lt;/div&gt; &lt;span class=&quot;arrow&quot;&gt; &lt;i class=&quot;iconfont icon-previewright&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;/a&gt; &lt;/section&gt; &lt;section class=&quot;profile_info_data border-1px&quot;&gt; &lt;ul class=&quot;info_data_list&quot;&gt; &lt;a href=&quot;javascript:&quot; class=&quot;info_data_link&quot;&gt; &lt;span class=&quot;info_data_top&quot;&gt;&lt;span&gt;0.00&lt;/span&gt;元&lt;/span&gt; &lt;span class=&quot;info_data_bottom&quot;&gt;我的余额&lt;/span&gt; &lt;/a&gt; &lt;a href=&quot;javascript:&quot; class=&quot;info_data_link&quot;&gt; &lt;span class=&quot;info_data_top&quot;&gt;&lt;span&gt;0&lt;/span&gt;个&lt;/span&gt; &lt;span class=&quot;info_data_bottom&quot;&gt;我的优惠&lt;/span&gt; &lt;/a&gt; &lt;a href=&quot;javascript:&quot; class=&quot;info_data_link&quot;&gt; &lt;span class=&quot;info_data_top&quot;&gt;&lt;span&gt;0&lt;/span&gt;分&lt;/span&gt; &lt;span class=&quot;info_data_bottom&quot;&gt;我的积分&lt;/span&gt; &lt;/a&gt; &lt;/ul&gt; &lt;/section&gt; &lt;section class=&quot;profile_my_order border-1px&quot;&gt; &lt;!-- 我的订单 --&gt; &lt;a href=&apos;javascript:&apos; class=&quot;my_order&quot;&gt; &lt;span&gt; &lt;i class=&quot;iconfont icon-dingdan&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;div class=&quot;my_order_div&quot;&gt; &lt;span&gt;我的订单&lt;/span&gt; &lt;span class=&quot;my_order_icon&quot;&gt; &lt;i class=&quot;iconfont icon-previewright&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;/div&gt; &lt;/a&gt; &lt;!-- 积分商城 --&gt; &lt;a href=&apos;javascript:&apos; class=&quot;my_order&quot;&gt; &lt;span&gt; &lt;i class=&quot;iconfont icon-jifen&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;div class=&quot;my_order_div&quot;&gt; &lt;span&gt;积分商城&lt;/span&gt; &lt;span class=&quot;my_order_icon&quot;&gt; &lt;i class=&quot;iconfont icon-previewright&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;/div&gt; &lt;/a&gt; &lt;!-- Mint外卖会员卡 --&gt; &lt;a href=&quot;javascript:&quot; class=&quot;my_order&quot;&gt; &lt;span&gt; &lt;i class=&quot;iconfont icon-viptehuishiduan&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;div class=&quot;my_order_div&quot;&gt; &lt;span&gt;Mint外卖会员卡&lt;/span&gt; &lt;span class=&quot;my_order_icon&quot;&gt; &lt;i class=&quot;iconfont icon-previewright&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;/div&gt; &lt;/a&gt; &lt;/section&gt; &lt;section class=&quot;profile_my_order border-1px&quot;&gt; &lt;!-- 服务中心 --&gt; &lt;a href=&quot;javascript:&quot; class=&quot;my_order&quot;&gt; &lt;span&gt; &lt;i class=&quot;iconfont icon-lianxikefu&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;div class=&quot;my_order_div&quot;&gt; &lt;span&gt;服务中心&lt;/span&gt; &lt;span class=&quot;my_order_icon&quot;&gt; &lt;i class=&quot;iconfont icon-previewright&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;/div&gt; &lt;/a&gt; &lt;/section&gt; &lt;/section&gt; &lt;/div&gt;&lt;!--省略js与style--&gt;8.3 HeaderTop组件8.3.1组件的构成分析中间有一个固定的标题栏，只是用在不同的路由组件中显示的内容不同标题栏两侧可能有搜索框之类的部分（Msite）也可能没有此组件为非路由组件的公用组件（所以在Components文件夹内）8.3.2 功能实现的技术标题栏两侧是否有其他部分，要用到slot插槽进行组件间通信slot 通信是标签, 而不是单纯的数据中间标题栏接收的文本可以用props8.3.3 组件代码12345678910111213141516171819&lt;template&gt; &lt;header class=&quot;header&quot;&gt; &lt;!-- 插槽是父组件与子组件的通讯方式，子组件中的slot可以显示父组件传递给子组件的内容 --&gt; &lt;slot name=&quot;left&quot;&gt;&lt;/slot&gt; &lt;span class=&quot;header_title&quot;&gt; &lt;span class=&quot;header_title_text ellipsis&quot;&gt;&#123;&#123;title&#125;&#125;&lt;/span&gt; &lt;/span&gt; &lt;slot name=&quot;right&quot;&gt;&lt;/slot&gt; &lt;/header&gt;&lt;/template&gt;&lt;script&gt; export default &#123; // 外部组件传递给此组件的属性 props: &#123; title: String &#125; &#125;&lt;/script&gt;8.3.4 在路由组件中使用在要使用此头部组件的文件中引入并注册HeaderTop组件1234567//Msite、Order、Search、Profile中都要引入注册才能使用import HeaderTop from '../../components/HeaderTop/HeaderTop.vue'export default &#123; components: &#123; HeaderTop &#125;&#125;然后使用&lt;HeaderTop&gt;&lt;/HeaderTop&gt;标签设置这个头部组件这里以Msite.vue为例，先删除静态模版里的Header部分，替换成HeaderTop组件123456789101112&lt;!-- 使用 title 来给头部组件传递数据 --&gt;&lt;HeaderTop title=&quot;芝罘区鲁东大学北区(青年南路)&quot;&gt; &lt;!-- 要使用slot=&quot;left&quot;指定插入的插槽位置 --&gt; &lt;span class=&quot;header_search&quot; slot=&quot;left&quot;&gt; &lt;i class=&quot;iconfont icon-sousuo&quot;&gt;&lt;/i&gt; &lt;/span&gt; &lt;span class=&quot;header_login&quot; slot=&quot;right&quot;&gt; &lt;span class=&quot;header_login_text&quot;&gt; 登录|注册 &lt;/span&gt; &lt;/span&gt;&lt;/HeaderTop&gt;在其他几个组件中的用法是一样的，同时还省去了slot插槽部分。8.4 使用swiper插件实现轮播图下载安装： npm install swiper --saveMsite.vue的HTML部分：12345678910&lt;!--在页面msite_nav导航部分使用swiper--&gt;&lt;div class="swiper-container"&gt; &lt;div class="swiper-wrapper"&gt; &lt;div class="swiper-slide"&gt;1&lt;/div&gt; &lt;div class="swiper-slide"&gt;2&lt;/div&gt; &lt;div class="swiper-slide"&gt;3&lt;/div&gt; &lt;/div&gt; &lt;!-- swiper轮播图圆点 --&gt; &lt;div class="swiper-pagination"&gt;&lt;/div&gt;&lt;/div&gt;script部分引入并初始化：12345678910111213141516171819&lt;script&gt;import Swiper from 'swiper'//同时引入swiper的 css文件import 'swiper/dist/css/swiper.min.css'export default &#123; //注意要在页面加载完成之后（mounted）再进行swiper的初始化 mounted () &#123; //创建一个swiper实例来实现轮播 new Swiper('.swiper-container', &#123; autoplay: true, // 如果需要分页器 pagination: &#123; el: '.swiper-pagination', clickable: true &#125; &#125;) &#125;&#125;&lt;/script&gt;具体用法参考Swiper官方文档8.5 拆分出商家列表ShopList组件商家列表是位于首页轮播图下面的部分，可以拆分为一般组件在components文件夹下新建ShopList文件夹并新建ShopList.vue文件该组件中用到需要一些图片资源，所以在ShopList文件夹下还需要新建images文件夹将原本放在Msite文件夹下的shop和stars图片资源移动到新建的images文件夹内 (其实都应该是动态地从后台获取)将Msite.vue模板中的&lt;div class=&quot;shop_container&quot;&gt;&lt;/div&gt;部分及相应的stylus样式代码移动到新建的ShopList.vue组件注意还要引入公共的css代码mixins.styl最后在Msite.vue中import引入商家列表组件并注册使用8.6 Login组件资源文件准备登录组件为一级路由组件，所以在pages文件夹下新建Login文件夹和Login.vuetemplate模板里会用到一张svg图片(静态的验证码图片)，所以还要在Login文件夹下新建images文件夹配置路由跳转将路由组件映射为路由，在router下的index.js文件里进行配置登录组件的路由是从个人中心Profile组件里跳转而来的，所以要修改Profile.vue123456789&lt;!--将class为profile-link的a标签替换为router-link--&gt;&lt;a href="javascript:" class="profile-link"&gt; ...&lt;/a&gt;&lt;!--但要注意不要忘记class类名--&gt;&lt;router-link to="/Login" class="profile-link"&gt; &lt;!--先不考虑未登录的情况--&gt; ...&lt;/router-link&gt;编写Login.vue代码利用@click=&quot;$router.back()&quot;实现点击页面的箭头返回上一级路由/Profile的功能实现控制Footer的显示隐藏已确定底部的四个路由组件需要显示Footer部分而Login组件为一级路由组件，且不需要显示底部的FooterGuide导航组件所以为路由组件添加meta元数据来标识是否显示Footer12345678&#123; path: '/msite', component: Msite, meta: &#123; showFooter: true &#125;&#125;,/*Order、Searh、Profile组件都要添加meta*/在App.vue组件中通过代表当前路由的$route就能得到添加的meta属性，然后根据属性值来确定是否显示FooterGuide组件1&lt;FooterGuide v-show="$route.meta.showFooter"&gt;&lt;/FooterGuide&gt;其他细节注意到一个问题，在一个路由组件(Msite)将页面下拉，再切换到其他路由组件(Profile)，页面不会自动回到顶部。12345/*解决方法 其他页面中类似*/.profile width 100% /*添加一行overflow hidden*/ overflow hidden9. 后台应用9.1 说明整个项目为前后端分离的项目：mintshop-client 与 mintshop-server后台应用负责处理前台应用提交的请求, 并给前台应用返回 json 数据前台应用负责展现数据, 与用户交互, 与后台应用交互9.2 运行确保启动 mongodb 服务进入mintshop-server文件夹，启动服务器应用: npm start9.3 API文档具体API文档详见mintshop-server/API.md，然后可以使用Postman来进行接口测试10. 前后台交互 ajax测试完后台接口，则需要写前后台交互的ajax文件在src/api文件夹下新建index.js与ajax.js首先需要安装axios npm install axios--save10.1 封装ajax请求函数为了实现统一向后端发送请求数据，所以需要封装一个ajax请求函数1234567891011121314151617181920212223242526272829303132333435363738394041/*ajax 请求函数模块*/ import axios from 'axios'/** * 向外部暴漏一个函数 ajax * @param &#123;*&#125; url 请求路径，默认为空 * @param &#123;*&#125; data 请求参数，默认为空对象 * @param &#123;*&#125; type 请求方法，默认为GET */export default function ajax(url = '', data = &#123;&#125;, type = 'GET') &#123; // 返回值 Promise对象 （异步返回的数据是response.data，而不是response） return new Promise(function (resolve, reject) &#123; //（利用axios）异步执行ajax请求 let promise // 这个内部的promise用来保存axios的返回值(promise对象) if (type === 'GET') &#123; // 准备 url query 参数数据 let dataStr = '' // 数据拼接字符串，将data连接到url Object.keys(data).forEach(key =&gt; &#123; dataStr += key + '=' + data[key] + '&amp;' &#125;) if (dataStr !== '') &#123; dataStr = dataStr.substring(0, dataStr.lastIndexOf('&amp;')) url = url + '?' + dataStr &#125; // 发送 get 请求 promise = axios.get(url) &#125; else &#123; // 发送 post 请求 promise = axios.post(url, data) &#125; promise.then(response =&gt; &#123; // 成功回调resolve() resolve(response.data) &#125;) .catch(error =&gt; &#123; // 失败回调reject() reject(error) &#125;) &#125;)&#125;通过对axios返回的promise对象再包装一层Promise的方法，来简化外部的调用10.2 封装接口请求函数有了发送请求数据的ajax函数，还需要封装一些与后台交互的接口函数根据接口文档来定义接口请求函数1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/*与后台交互模块 （依赖已封装的ajax函数） */import ajax from './ajax'/** * 获取地址信息(根据经纬度串) * 这个接口的经纬度参数是在url路径里的，没有query参数 */export const reqAddress = geohash =&gt; ajax(`/position/$&#123;geohash&#125;`)/** * 获取 msite 页面食品分类列表 */export const reqCategorys = () =&gt; ajax('/index_category')/** * 获取 msite 商铺列表(根据query参数：经纬度) * 将经纬度两个数据作为一个参数对象传入 * 也可以两个数据分别传入ajax， 然后再放入一个对象参数内， 如下面的手机号验证码接口 */export const reqShops = (&#123; latitude, longitude&#125;) =&gt; ajax('/shops', &#123; latitude, longitude&#125;)/** * 账号密码登录 */export const reqPwdLogin = (name, pwd, captcha) =&gt; ajax('/login_pwd', &#123; name, pwd, captcha&#125;, 'POST')/** * 获取短信验证码 */export const reqSendCode = phone =&gt; ajax('/sendcode', &#123; phone&#125;)/** * 手机号验证码登录 */export const reqSmsLogin = (phone, code) =&gt; ajax('/login_sms', &#123; phone, code&#125;, 'POST')/** * 获取用户信息(根据会话) */export const reqUser = () =&gt; ajax('/userinfo')/* * 请求登出 */export const reqLogout = () =&gt; ajax('/logout')10.3 配置代理并测试接口实现ajax跨域请求问题分析：目前为止运行的所有页面都是静态页面接下来先测试使用封装的ajax接口请求函数来异步获取数据123456789101112// 先在App.vue中引入封装的接口函数import &#123;reqCategorys&#125; from './api'// 然后再调用接口，测试打印数据export default &#123; async mounted () &#123; const result = await reqCategorys() console.log(result) &#125;, components: &#123; FooterGuide &#125;&#125;打开浏览器，运行项目会报错GET http://local:4000/index_category 404(Not Found)此时想起后端API端口为4000，然后在api文件夹下的index.js中修改测试1234// 定义BASE_URLconst BASE_URL = 'http://local:4000'// 然后修改请求接口的urlexport const reqCategorys = () =&gt; ajax(BASE_URL + '/index_category')然后再打开项目，发现依然报错access-control-allow-origin提示请求为跨域请求配置代理并测试接口：除了设置让服务器允许跨域的方法之外，还可以通过配置代理实现跨域请求在项目config文件夹下的index.js文件里设置代理配置表123456789101112131415161718// Paths// 静态资源文件夹assetsSubDirectory: 'static',// 发布路径assetsPublicPath: '/',// 代理配置表，在这里可以配置特定的请求代理到对应的API接口// 例如将'localhost:8080/api/xxx'代理到'www.example.com/api/xxx'proxyTable: &#123; '/api': &#123; // 匹配所有以 '/api'开头的请求路径 target: 'http://localhost:4000', // 代理目标的基础路径 // secure: false, // 如果是https接口，需要配置这个参数 changeOrigin: true, // 支持跨域 pathRewrite: &#123; // 重写路径: 去掉路径中开头的'/api' '^/api': '' &#125; &#125;&#125;,修改api文件夹index.js里接口函数的请求路径123456// const BASE_URL = 'http://local:4000'const BASE_URL = '/api'export const reqAddress = geohash =&gt; ajax(`$&#123;BASE_URL&#125;/position/$&#123;geohash&#125;`)export const reqCategorys = () =&gt; ajax(BASE_URL + '/index_category')// 下面修改后的接口省略...因为修改了项目的config文件，所以需要重启项目npm run dev此时可以在控制台看到跨域请求到的数据{code: 0, data: Array(16)}11. 使用Vuex管理状态安装Vuexnpm install vuex --save用来管理从后台获取的状态数据以下代码以首页Msite为例11.1 创建Store(核心仓库)在项目的store文件夹下新建index.js1234567891011121314151617181920212223/*vuex最核心的管理对象store */// 首先引入Vue及Vueximport Vue from 'vue'import Vuex from 'vuex'// 引入四个基本模块import state from './state'import mutations from './mutations'import actions from './actions'import getters from './getters'// 一定要声明使用插件Vue.use(Vuex)// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件export default new Vuex.Store(&#123; state, mutations, actions, getters&#125;)11.2 模块对象11.2.1 State分析整理出项目首页Msite中有哪些状态需要管理，然后写入state.js12345678910/*状态对象 state */export default &#123; latitude: 40.10038, // 纬度 longitude: 116.36867, // 经度 address: &#123;&#125;, // 地址相关信息对象 categorys: [], // 食品分类数组 shops: [] // 商家数组&#125;11.2.2 Mutation更改 Vuex 的 store 中的状态的唯一方法是提交 mutation每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)我们可以使用常量替代 Mutation 事件类型，新建mutations-types文件123456/*包含n个mutation的type名称常量 */export const RECEIVE_ADDRESS = 'receive_address' // 接收地址信息export const RECEIVE_CATEGORYS = 'receive_categorys' // 接收分类数组export const RECEIVE_SHOPS = 'receive_shops' // 接收商家数组然后在mutations.js文件内引入使用(注意书写格式)1234567891011121314151617/*vuex 的 mutations 模块*/import &#123;RECEIVE_ADDRESS,RECEIVE_CATEGORYS,RECEIVE_SHOPS&#125; from './mutation-types'// [方法名](state,&#123;param&#125;)&#123;&#125;export default &#123; [RECEIVE_ADDRESS](state, &#123;address&#125;) &#123; state.address = address &#125;, [RECEIVE_CATEGORYS](state, &#123;categorys&#125;) &#123; state.categorys = categorys &#125;, [RECEIVE_SHOPS](state, &#123;shops&#125;) &#123; state.shops = shops &#125;&#125;而回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数11.2.3 ActionAction 类似于 mutation，不同在于：Action 提交的是 mutation，而不是直接变更状态。Action 可以包含任意异步操作。1234567891011121314151617181920212223242526272829// Action:通过操作mutation间接更新state的多个方法的对象// 注意要引入api接口函数import &#123;reqAddress, reqCategorys, reqShops&#125; from '../api'import &#123;RECEIVE_ADDRESS, RECEIVE_CATEGORYS, RECEIVE_SHOPS&#125; from './mutation-types'export default &#123; // 异步获取地址 async getAddress (&#123;commit, state&#125;) &#123; // 从state状态中获取到经纬度用来设置reqAddress的参数（看接口文档） const geohash = state.latitude + ',' + state.longitude // 1. 发送异步ajax请求 const result = await reqAddress(geohash) // 2. 根据结果提交一个mutation commit(RECEIVE_ADDRESS, &#123;address: result.data&#125;) &#125;, // 异步获取分类列表 async getCategorys (&#123;commit&#125;) &#123; const result = await reqCategorys() commit(RECEIVE_CATEGORYS, &#123;categorys: result.data&#125;) &#125;, // 异步获取商家列表 async getShops (&#123;commit, state&#125;) &#123; // 对象的解构赋值 const &#123;latitude, longitude&#125; = state // 注意参数的顺序 const result = await reqShops(&#123;latitude, longitude&#125;) commit(RECEIVE_SHOPS, &#123;shops: result.data&#125;) &#125;&#125;至此已经完成了首页状态数据的vuex设置11.3 异步获取并显示数据在项目中注册store123456//项目的main.js文件import store from './store'new Vue(&#123; store&#125;)测试异步获取当前地址数据123456// 地址信息要尽早的获取，所以请求可以写在App.vue中// 首先删除之前测试使用封装的ajax接口的代码async mounted () &#123; // 通过this.$store.dispatch 方法触发调用Action this.$store.dispatch('getAddress')&#125;运行项目，在浏览器控制台里打开vue开发工具，切换到vuex，可以看到通过vuex异步获取的状态数据除了这种方法调用action，还可以使用mapActions语法糖12345678import &#123;mapActions&#125; from 'vuex'async mounted () &#123; this.getAddress()&#125;methods: &#123; ...mapActions(['getAddress'])&#125;读取并显示获取到的当前地址数据首页Msite组件中显示地址信息123456// 利用mapState语法糖去读取state对象import &#123;mapState&#125; from 'vuex'computed: &#123; ...mapState(['address'])&#125;123&lt;HeaderTop :title="address.name"&gt;// 将静态地址信息换成异步获取的地址数据 注意:title为绑定数据&lt;/HeaderTop&gt;12. 完成Msite页面12.1 异步显示食品分类轮播列表上面已经完成了首页当前地址信息的获取与显示，接下来是完成Msite.vue中的食品分类的轮播图mounted方法中通过this.$store.dispatch调用Action来获取异步数据12345// 忘记Actuon里对应的方法名时查看Action.jsmounted () &#123; this.$store.dispatch('getCategorys') ...&#125;通过mapState语法糖来读取获取到的异步数据1234// 忘记state名时查看State.jscomputed: &#123; ...mapState(['address', 'categorys'])&#125;分析template结构并处理categorys数据业务分析： 此时获取到的categorys是所有食品类别的一维数组，而如果要完成轮播图，需要将其变成这种[[page1], [page2], [page3]]二维数组categorysArr。比如本项目中有两页轮播图，一页为8个数据。应该把categorys数组处理成[[data1 - 8], [data1 - 8]]这种数据格式123456//template&lt;div class="swiper-slide" v-for="(pages,index) in categorysArr" :key="index"&gt; &lt;a href="javascript:" class="(data,index) in pages" :key="index"&gt; ...... &lt;/a&gt;&lt;/div&gt;利用计算属性将categorys处理成期望的数据结构categorysArr1234567891011121314151617181920212223242526272829computed () &#123; ...mapState(['address', 'categorys']), /* 根据categorys一维数组生成一个2维数组 小数组中的元素个数最大是8 */ categorysArr () &#123; // 1.先从当前组件中得到所有食品分类的一维数组 const &#123;categorys&#125; = this // 2.准备一个空的二维数组--categorysArr const arr = [] // 3.准备一个小数组--pages(最大长度为8) let minArr = [] // 4.遍历categorys得到处理后的二维数组catagorysArr categorys.forEach(data =&gt; &#123; // 如果当前小数组(pages)已经满了, 创建一个新的 if (minArr.length === 8) &#123; minArr = [] &#125; // 如果minArr是空的, 将小数组(pages)保存到大数组(categorysArr)中 if (minArr.length === 0) &#123; arr.push(minArr) &#125; // 将当前分类信息保存到小数组(pages)中 minArr.push(data) &#125;) return arr &#125;&#125;注意第4步forEach里的逻辑顺序1.为什么当minArr数组的长度为0时就将它与大数组关联起来，不是等它存满(8个)？因为有可能categorys里的数据个数不为8的倍数，最后一个minArr内的数据不足8个。2.为什么先判断minArr的长度为8的情况再判断等于0的情况？因为先判断minArr的长度为0，将其放入大数组中与大数组关联起来，那么等到当前这个minArr填充完成之后新建的小数组则无法与大数组关联起来。所以先判断长度为8的情况，再判断数组长度为0的情况。就可以确保之前的minArr填充完成后，新建的minArr都可以被放到大数组里与大数组关联起来。除了上面的方式处理categorys，也可以采用分割数组的方法。12345678categorysArr () &#123; const &#123;categorys&#125; = this const arr = [] for (let i = 0,len = categorys.length;i &lt; len; i += 8)&#123; arr.push(categorys.slice(i, i + 8)) &#125; return arr&#125;将数据显示到页面上123456// 因为食品分类的图片信息都有一个baseImageUrl所以在data里定义data () &#123; return &#123; baseImageUrl: 'https://fuss10.elemecdn.com' &#125;&#125;,123456789&lt;!--通过v-for循环渲染data的信息 注意src为绑定数据--&gt; &lt;div class="swiper-slide" v-for="(pages,index) in categorysArr" :key="index"&gt; &lt;a href="javascript:" class="link_to_food" v-for="(data,index) in pages" :key="index"&gt; &lt;div class="food_container"&gt; &lt;img :src="baseImageUrl+data.image_url"&gt; &lt;/div&gt; &lt;span&gt;&#123;&#123;data.title&#125;&#125;&lt;/span&gt; &lt;/a&gt;&lt;/div&gt;12.2 使用watch与$nextTick解决轮播的Bug分页器Swiper其实应该是在轮播列表显示(即categorys数组有了数据)以后才初始化。最开始categorys为空数组，有了数据才会显示轮播列表，而要监视categorys的数据变化，就要用到watch。1234567// 新建watch 监听categoryswatch: &#123; categorys (value) &#123; // categorys数组中有数据了 // 但界面还没有异步更新 &#125;&#125;// 删除mounted中的new Swiper...代码但其实state里的状态数据改变（categorys接收数据）与异步更新界面（显示轮播列表）是两个步骤。所以需要等一等，界面完成异步更新后才可以进行Swiper的初始化。123456789101112// 使用setTimeout可以实现效果, 但是时机不准确setTimeout(() =&gt; &#123; // 创建一个Swiper实例对象, 来实现轮播 new Swiper('.swiper-container', &#123; autoplay: true, // 如果需要分页器 pagination: &#123; el: '.swiper-pagination', clickable: true &#125; &#125;)&#125;, 100)利用vm.$nextTick( [callback] )来实现等待界面完成异步更新就立即创建Swiper对象12345678910// 在修改数据之后立即使用它，然后等待 DOM 更新。this.$nextTick(() =&gt; &#123; // 一旦完成界面更新, 立即执行回调 new Swiper('.swiper-container', &#123; autoplay: true, pagination: &#123; el: '.swiper-pagination', clickable: true &#125;&#125;)12.3 异步显示商家列表在Msite的mounted中获取异步数据1this.$store.dispatch('getShops')在ShopList.vue中引入mapState，在computed中读取状态数据123456import &#123;mapState&#125; from 'vuex'export default &#123; computed: &#123; ...mapState(['shops']) &#125;&#125;修改template并添加data12345data () &#123; return &#123; baseImgUrl: 'http://owoccema2.bkt.clouddn.com/show/MintShop/' &#125;&#125;12345678910111213141516171819&lt;li class="shop_li border-1px" v-for="(shop,index) in shops" :key="index"&gt; &lt;a&gt; &lt;div class="shop_left"&gt; &lt;img class="shop_img" :src="baseImgUrl + shop.image_path"&gt; &lt;/div&gt; &lt;div class="shop_right"&gt; &lt;section class="shop_detail_header"&gt; &lt;h4 class="shop_title ellipsis"&gt;&#123;&#123;shop.name&#125;&#125;&lt;/h4&gt; &lt;ul class="shop_detail_ul"&gt; ... &lt;/ul&gt; &lt;/section&gt; &lt;section class="shop_rating_order"&gt; &lt;section class="shop_rating_order_left"&gt; ... &lt;/section&gt; &lt;/div&gt; &lt;/a&gt;&lt;/li&gt;12.4 开发评分Star组件不仅在首页的商家列表中有五颗星星的评分部分，商家信息的评价区域也有star评分，所以可以把它抽取成一个可复用的一般组件。在components文件夹下新建Star文件夹，然后将原本在ShopList文件夹下的images文件夹里的stars移动到新建的Star文件夹里并重命名为images在Star文件夹里新建Star.vue并将ShopList.vue中评分部分的模版和样式剪切进去，注意修改图片路径1234567&lt;div class="star star-24"&gt; &lt;span class="star-item on"&gt;&lt;/span&gt; &lt;span class="star-item on"&gt;&lt;/span&gt; &lt;span class="star-item on"&gt;&lt;/span&gt; &lt;span class="star-item half"&gt;&lt;/span&gt; &lt;span class="star-item off"&gt;&lt;/span&gt;&lt;/div&gt;根据类名为组件设置属性props和计算属性1234567891011121314151617181920212223242526272829303132333435// 类名常量const CLASS_ON = 'on'const CLASS_HALF = 'half'const CLASS_OFF = 'off'export default &#123; props: &#123; score: Number, size: Number &#125;, computed: &#123; /* 3.2: 3 + 0 + 2 4.7: 4 + 1 + 0 */ // 该方法产生一个数组starArr来表示on half off类名的span数量（总长度为5） starClasses () &#123; const &#123;score&#125; = this const starArr = [] // 向starArr中添加n个CLASS_ON const scoreInteger = Math.floor(score) for (let i = 0; i &lt; scoreInteger; i++) &#123; starArr.push(CLASS_ON) &#125; // 向starArr中添加0/1个CLASS_HALF if(score*10-scoreInteger*10&gt;=5) &#123; starArr.push(CLASS_HALF) &#125; // 向starArr中添加n个CLASS_OFF while(starArr.length&lt;5) &#123; starArr.push(CLASS_OFF) &#125; return starArr &#125; &#125;&#125;修改template模版123&lt;div class="star" :class="'star-'+size"&gt; &lt;span class="star-item" v-for="(sc, index) in starClasses" :class="sc" :key="index"&gt;&lt;/span&gt;&lt;/div&gt;在ShopList中import引入并注册使用1&lt;Star :score="shop.rating" :size="24"&gt;&lt;/Star&gt;12.5 使用svg显示页面加载中提示界面目前首页的内容数据已经可以异步获取并显示，但在数据还未加载完成时，为了优化用户体验，应该给出页面加载中的提示界面。首先将svg资源图片放入相应的Msite和ShopList的images文件夹里然后修改模版的显示条件12345&lt;!--Msite--&gt;&lt;div class="swiper-container" v-if="categorys.length"&gt; ...&lt;/div&gt;&lt;img src="./images/msite_back.svg" alt="back" v-else&gt;12345678910&lt;!--ShopList--&gt;&lt;ul class="shop_list" v-if="shops.length"&gt; ...&lt;/ul&gt;&lt;!-- 循环显示6个svg图片 --&gt;&lt;ul v-else&gt; &lt;li v-for="item in 6" :key="item"&gt; &lt;img src="./images/shop_back.svg" alt="back"&gt; &lt;/li&gt;&lt;/ul&gt;13. 实现登陆注册功能13.1 模块界面效果及交互功能说明1. 界面相关效果切换登陆方式手机号合法检查倒计时效果切换显示或隐藏密码前台验证提示*2. 前后台交互功能 *动态一次性图形验证码动态一次性短信验证码短信登陆密码登陆获取用户信息,实现自动登陆退出登陆13.2 效果一：切换登陆方式既然要切换登陆方式，就需要一个变量来标识这两种方式12345data () &#123; return &#123; loginWay: false // true代表短信登陆, false代表密码 &#125;&#125;动态绑定a标签的class和点击事件来实现点击切换样式1234 &lt;div class="login_header_title"&gt; &lt;a href="javascript:;" :class="&#123;on: loginWay&#125;" @click="loginWay=true"&gt;短信登录&lt;/a&gt; &lt;a href="javascript:;" :class="&#123;on: !loginWay&#125;" @click="loginWay=false"&gt;密码登录&lt;/a&gt;&lt;/div&gt;同时实现下面的表单登陆框自动切换12345678910&lt;div class="login_content"&gt; &lt;form&gt; &lt;div :class="&#123;on: loginWay&#125;"&gt; 短信登陆的input... &lt;/div&gt; &lt;div :class="&#123;on: !loginWay&#125;"&gt; 密码登陆的input... &lt;/div&gt; &lt;/form&gt;&lt;/div&gt;13.3 效果二：手机号合法检查既然是要对手机号格式进行检查就要为其绑定数据12&lt;!--v-model的值最好按照api文档里要求的字段来命名--&gt;&lt;input type="tel" maxlength="11" placeholder="手机号" v-model="phone"&gt;根据手机号格式是否正确来动态的为获取验证码添加一个类名right_phone1&lt;button disabled="disabled" class="get_verification" :class="&#123;right_phone:rightPhone&#125;"&gt;获取验证码&lt;/button&gt;right_phone的值是根据phone来确定的，所以应该是一个计算属性123456computed: &#123; rightPhone () &#123; // 利用正则对手机号进行匹配，返回布尔值 return /^1\d&#123;10&#125;$/.test(this.phone) &#125;&#125;此时button的disabled也应该根据rightPhone的返回值来确定1&lt;button :disabled="!rightPhone" class="get_verification" :class="&#123;right_phone:rightPhone&#125;"&gt;获取验证码&lt;/button&gt;在style部分加入新定义的right_phone样式1234.get_verification ... &amp;.right_phone color black13.4 效果三：30s倒计时点击获取验证码之后会显示30s倒计时的效果并发送获取验证码的请求注意要阻止点击button的默认提交表单事件，所以用@click.prevent1&lt;button :disabled="!rightPhone" class="get_verification" :class="&#123;right_phone:rightPhone&#125;" @click.prevent="getCode"&gt;获取验证码&lt;/button&gt;在data里定义定时变量computeTime，然后感觉时间判断显示的内容1&lt;button class="get_verification"&gt;&#123;&#123;computeTime&gt;0 ? `($&#123;computeTime&#125;s)已发送` : '获取验证码'&#125;&#125;&lt;/button&gt;然后在methods里定义定时器1234567891011121314151617methods: &#123; getCode () &#123; // 如果当前没有计时!this.computeTime等于this.computeTime === 0 if(!this.computeTime) &#123; // 启动倒计时 this.computeTime = 30 this.intervalId = setInterval(() =&gt; &#123; this.computeTime-- if(this.computeTime &lt;= 0) &#123; // 停止计时 clearInterval(this.intervalId) &#125; &#125;, 1000) &#125; // 发送ajax请求（向指定手机号发送验证码短信） &#125; &#125;13.5 效果四： 密码的显示隐藏利用两个type不同的input来实现密码的显示隐藏在data里定义showPwd(默认为false)控制两者的显隐，同时使用v-model绑定数据pwd12345&lt;section class="login_verification"&gt; &lt;input type="text" maxlength="8" placeholder="密码" v-if="showPwd" v-model="pwd"&gt; &lt;input type="password" maxlength="8" placeholder="密码" v-else v-model="pwd"&gt; ...&lt;/section&gt;为滑块区域添加点击监听，用来切换showPwd的值同时切换滑块的各种样式1234&lt;div class="switch_button" :class="showPwd?'on':'off'" @click="showPwd=!showPwd"&gt; &lt;div class="switch_circle" :class="&#123;right: showPwd&#125;"&gt;&lt;/div&gt; &lt;span class="switch_text"&gt;&#123;&#123;showPwd ? 'abc' : '...'&#125;&#125;&lt;/span&gt;&lt;/div&gt;添加必要的style1234&gt;.switch_circle ... &amp;.right transform translateX(30px)13.6 效果五：前台表单验证首先阻止点击登录button的默认提交表单事件123&lt;form @submit.prevent = "login"&gt; ...&lt;/form&gt;在methods里定义login方法并收集表单数据(即为未使用v-model绑定data的input添加data)12345678data () &#123; return &#123; ... name: '', // 用户名 code: '', // 短信验证码 captcha: '', // 图形验证码 &#125;&#125;在login里根据不同的登录方式对收集的数据进行检查1234567891011if(this.loginWay) &#123; // 短信登陆 if(!this.rightPhone) &#123; // 手机号不正确 return &#125; else if(!/^\d&#123;6&#125;$/.test(code)) &#123; // 验证必须是6位数字 return &#125;&#125;else &#123; // 密码登陆 ...&#125;要将验证失败的提示信息显示出来，可以使用自定义AlertTip弹窗组件(开发中可以用第三方插件)12345678import AlertTip from '../../components/AlertTip/AlertTip.vue'...export default &#123; ... components: &#123; AlertTip &#125;&#125;为AlertTip定义状态数据1234567data () &#123; return &#123; ... alertText: '', // 提示文本 alertShow: false, // 是否显示警告框 &#125;&#125;在页面中放置弹窗组件1234&lt;section&gt; ... &lt;AlertTip :alertText="alertText" v-show="alertShow" @closeTip="closeTip"/&gt;&lt;/section&gt;抽取显示弹窗和关闭弹窗的方法，并在login方法和AlertTip中使用1234567891011121314151617181920showAlert (alertText) &#123; this.alertShow = true this.alertText = alertText&#125;,closeTip () &#123; this.alertShow = false this.alertText = ''&#125;,login () &#123; if(this.loginWay) &#123; // 短信登陆 if(!this.rightPhone) &#123; // 手机号不正确 this.showAlert('手机号不正确') return &#125; else if(!/^\d&#123;6&#125;$/.test(code)) &#123; this.showAlert('验证必须是6位数字') return &#125; &#125;...&#125;13.7 功能一：图形验证码根据API文档，动态一次性图形验证码的接口为http://localhost:4000/captcha同时为这个img添加点击事件，让其可以点击重新发送请求，刷新图片1&lt;img class="get_verification" src="http://localhost:4000/captcha" alt="captcha" @click="getCaptcha" ref="captcha"&gt;为这个img元素添加ref属性，方便在getCaptcha中使用利用时间戳使其每次加载时的请求参数不一样1234getCaptcha () &#123; // 每次指定的src要不一样 this.$refs.captcha.src = 'http://localhost:4000/captcha?time='+Date.now()&#125;13.8 功能二：短信验证码利用第三方短信验证码平台(容联云通讯)提供的接口来实现先在服务端项目将自己的sid与token填入util文件夹下的sms_util.js文件再在客户端的登录组件中引入接口请求函数(这是为了方便处理，同样也可以在action里调用)1import &#123;reqSendCode, reqSmsLogin, reqPwdLogin&#125; from '../../api'在getCode方法里进行调用1234567891011121314151617// 请求返回的是promise对象，所以用到了async awaitasync getCode () &#123; ... // 发送ajax请求(向指定手机号发送验证码短信) const result = await reqSendCode(this.phone) if(result.code===1) &#123; // 手机号验证失败 // 显示提示 this.showAlert(result.msg) // 停止计时 if(this.computeTime) &#123; this.computeTime = 0 clearInterval(this.intervalId) this.intervalId = undefined &#125; &#125;&#125;// 只要手机号填写正确 短信验证码也可以在服务端的控制台中查看13.9 功能三：短信与密码登录在login方法里完成短信和密码登录的aiax请求12345678910async login () &#123; let result // 保存登录成功后返回的数据 ... // 发送ajax请求短信登陆 result = await reqSmsLogin(phone, code) ... // 发送ajax请求密码登陆 result = await reqPwdLogin(&#123;name, pwd, captcha&#125;) ...&#125;点击登录发送请求的同时停止计时器，然后将请求的结果进行处理123456789101112131415161718192021 ...// 停止计时if(this.computeTime) &#123; this.computeTime = 0 clearInterval(this.intervalId) this.intervalId = undefined&#125;// 根据结果数据处理if(result.code===0) &#123; // 成功 const user = result.data // 将user信息保存到vuex的state // todo // 去个人中心界面 this.$router.replace('/profile')&#125; else &#123; // 显示新的图片验证码 this.getCaptcha() // 显示警告提示 const msg = result.msg this.showAlert(msg)&#125;测试用的用户名: abc，密码: 123。13.10 功能四：获取用户信息,实现自动登陆1. 将用户信息保存到vuex在state中添加用户信息的状态数据userInfo1userInfo: &#123;&#125; // 用户信息在mutation-types中定义常量1export const RECEIVE_USER_INFO = 'receive_user_info' // 接收用户信息在mutations文件中增加改变state的方法1234 //先import引入RECEIVE_USER_INFO [RECEIVE_USER_INFO] (state, &#123;userInfo&#125;) &#123; state.userInfo = userInfo&#125;在actions文件中增加同步用户信息的方法因为之前已经异步获取了用户信息，所以这里将用户信息state更新的操作是同步的12345// 要先引入RECEIVE_USER_INFO这个mutation// 同步记录用户信息 recordUser (&#123;commit&#125;, userInfo) &#123; commit(RECEIVE_USER_INFO, &#123;userInfo&#125;) &#125;在Login组件中调用这个action12// 将user保存到vuex的statethis.$store.dispatch('recordUser',user)之后可以在个人中心Profile页面读取并显示用户信息userInfo12345import &#123;mapState&#125; from 'vuex'...computed: &#123; ...mapState(['userInfo'])&#125;1&lt;p class="user-info-top"&gt;&#123;&#123;userInfo.name || '登录/注册'&#125;&#125;&lt;/p&gt;2. 更新登录后的个人中心界面使用用户名和密码登录时显示用户名和绑定的手机号信息使用手机号登录时只需要显示手机号根据用户是否登录来定义a标签不同的路由1234567891011&lt;!--userinfo路由对应的页面暂时未做--&gt;&lt;router-link :to="userInfo._id ? '/userinfo': '/login'"&gt; ... &lt;div class="user-info"&gt; &lt;p class="user-info-top" v-if="!userInfo.phone" &gt; &#123;&#123;userInfo.name || '登录/注册'&#125;&#125;&lt;/p&gt; &lt;p&gt; ... &lt;span class="icon-mobile-number"&gt;&#123;&#123;userInfo.phone || '暂无绑定手机号'&#125;&#125;&lt;/span&gt; &lt;/p&gt; &lt;/div&gt;&lt;/router-link&gt;同时要注意首页Msite顶部的信息也要进行更改123456789&lt;router-link class="header_login" slot="right" :to="userInfo._id ? '/userinfo': '/login'"&gt; &lt;span class="header_login_text" v-if="!userInfo._id"&gt; 登录|注册 &lt;/span&gt; &lt;!--如果已经登录则显示一个icon--&gt; &lt;span class="header_login_text" v-else&gt; &lt;i class="iconfont icon-yonghuming"&gt;&lt;/i&gt; &lt;/span&gt;&lt;/router-link&gt;3. 完成自动登录功能服务器端的routes文件夹下的index.js中已经定义了返回用户信息的方法123456789101112131415161718// 其中她将用户的userid取出来放入一个session会话中router.get('/userinfo', function (req, res) &#123; // 取出userid const userid = req.session.userid // 查询 UserModel.findOne(&#123;_id: userid&#125;, _filter, function (err, user) &#123; // 如果没有, 返回错误提示 if (!user) &#123; // 清除浏览器保存的userid的cookie delete req.session.userid res.send(&#123;code: 1, msg: '请先登陆'&#125;) &#125; else &#123; // 如果有, 返回user res.send(&#123;code: 0, data: user&#125;) &#125; &#125;)&#125;)app.js中已经定义了这个用户登录的session会话的维持时间为24h123456app.use(session(&#123; secret: '12345', cookie: &#123;maxAge: 1000*60*60*24 &#125;, //设置maxAge是80000ms，即80s后session和相应的cookie失效过期 resave: false, saveUninitialized: true,&#125;));api中的对应接口已经完成12// 获取用户信息(根据会话)export const reqUserInfo = () =&gt; ajax(BASE_URL + '/userinfo')在action中定义一个方法来调用这个接口12345678// 异步获取用户信息(先引入reqUserInfo接口)async getUserInfo (&#123;commit&#125;) &#123; const result = await reqUserInfo() if (result.code === 0) &#123; const userInfo = result.data commit(RECEIVE_USER_INFO, &#123;userInfo&#125;) &#125; &#125;最后在App.vue中引入action并触发12345678async mounted () &#123; ... // this.getAddress() this.getUserInfo() &#125;,methods: &#123; ...mapActions(['getUserInfo']) &#125;13.11 功能五：退出登录用户登录后在个人中心页面添加一个退出登录的按钮下载安装mint-ui来实现12// 安装mint-uinpm install --save mint-ui实现自动按需打包12// 安装工具包npm install --save-dev babel-pulgin-component1234567// 配置"plugins": ["transform-runtime",["component", [ &#123; "libraryName": "mint-ui", "style": true &#125;]]]引入并注册使用mint-ui的标签组件12345// 在入口的main.js引入Buttonimport &#123;Button&#125; from 'mint-ui'// 注册全局组件Vue.component(Button.name, Button)在Profile页面中使用mint-ui的标签1234&lt;section class="profile_my_order border-1px"&gt; &lt;!--只有用户登录之后才会显示 同时绑定点击事件--&gt; &lt;mt-button type="danger" style="width: 100%" v-if="userInfo._id" @click="logout"&gt;退出登录&lt;/mt-button&gt;&lt;/section&gt;引入mint-ui的confirm确认和toast文本提示框1234567891011121314import &#123; MessageBox, Toast &#125; from 'mint-ui'logout () &#123; MessageBox.confirm('确认退出吗?').then( action =&gt; &#123; // 请求退出 this.$store.dispatch('logout') Toast('登出完成') &#125;, action =&gt; &#123; console.log('取消登录') &#125; )&#125;在actions.js中定义退出登录的方法123456// 首先引入api的index.js中定义的reqLogout接口和mutation// 异步登出async logout (&#123;commit&#125;) &#123; const result = await reqLogout() if (result.code === 0) &#123; commit(RESET_USER_INFO)&#125;&#125;12345678//同时改动下列两个文件//mutations-types文件export const RESET_USER_INFO = 'receive_user_info' // 重置用户信息//mutations文件[RESET_USER_INFO] (state) &#123; state.userInfo = &#123;&#125; &#125;14. 商家店铺界面14.1 商家店铺的整体页面搭建通过点击商家列表(ShopList)里的某一项进入商家店铺的一级路由界面(Shop.vue)，商家店铺界面包括顶部的一个头部的一般组件(ShopHeader.vue)和下面三个可以切换的路由子组件(ShopGoods、ShopInfo、ShopRatings)在router文件夹下的index.js文件中将路由组件注册成路由1234567891011121314151617181920&#123; path: '/shop', component: Shop, children: [&#123; path: '/shop/goods', component: ShopGoods &#125;, &#123; path: '/shop/ratings', component: ShopRatings &#125;, &#123; path: '/shop/info', component: ShopInfo &#125;, &#123; path: '', redirect: '/shop/goods' &#125;]&#125;在ShopList.vue中为商家列表添加点击事件12345&lt;ul class="shop_list" v-if="shops.length"&gt; &lt;li class="shop_li border-1px" v-for="(shop,index) in shops" :key="index" @click="$router.push('/shop')"&gt; ... &lt;/li&gt;&lt;/ul&gt;Shop.vue中引入各路由组件然后在模版中使用12345678910111213141516171819&lt;div&gt; &lt;ShopHeader&gt;&lt;/ShopHeader&gt; &lt;div class="tab"&gt; &lt;div class="tab-item"&gt; &lt;!-- 使用replace的方式进行路由切换 （路由懒加载） --&gt; &lt;router-link to="/shop/goods" replace&gt;点餐 &lt;/router-link&gt; &lt;/div&gt; &lt;div class="tab-item"&gt; &lt;router-link to="/shop/ratings" replace&gt;评价 &lt;/router-link&gt; &lt;/div&gt; &lt;div class="tab-item"&gt; &lt;router-link to="/shop/info" replace&gt;商家 &lt;/router-link&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 缓存路由组件对象 --&gt; &lt;keep-alive&gt; &lt;router-view/&gt; &lt;/keep-alive&gt;&lt;/div&gt;14.2 Json模拟数据设计json数据的结构商家店铺界面包括点餐、评价、和商家信息三个部分的数据(头部显示的数据也是商家信息)，而且这三个方面的数据直接没有顺序关系，可以使用对象结构来存储它们。12345678910111213141516171819202122// 点餐数据里包括各种不同分类的食品，可以用数组goods[]来存放这些数据对象(没有顺序关系但属于同一类型)// 每一类食品除了分类名称name还有一个foods数据来存放这一类的食品// foods数组内的每个对象都是一个食品实例&#123; "goods":[ &#123; name: "精选套餐", foods: [ &#123; name: "南瓜粥", price: 9 &#125; ] &#125; ], "ratings":[ &#123;&#125; ], "info":｛｝&#125;// 评价数据都属于同一类型，可以使用数组来存放[&#123;评价一&#125;,&#123;评价二&#125;..]// 商家信息数据没有顺序，可以统一保存到对象内将设计好的data.json模拟数据保存在mock文件夹内使用mockjs模拟数据接口1npm install --save mockjs在mock文件夹下定义mockServer文件配置mock模拟数据的接口1234567891011121314/*使用mockjs提供mock数据接口 */import Mock from 'mockjs'import data from './data.json'// 返回goods的接口Mock.mock('/goods', &#123;code: 0, data: data.goods&#125;)// 返回ratings的接口Mock.mock('/ratings', &#123;code: 0, data: data.ratings&#125;)// 返回info的接口Mock.mock('/info', &#123;code: 0, data: data.info&#125;)// export default ??? 不需要向外暴露任何数据, 只需要保存能执行即可在main.js中加载mockServer文件即可1import './mock/mockServer.js'ajax请求mockjs模拟的数据api/index.js中定义ajax请求方法123456789101112/* * 获取商家信息(下列请求由mock拦截并返回 不需要代理) */export const reqShopInfo = () =&gt; ajax('/info')/** * 获取商家评价数组 */export const reqShopRatings = () =&gt; ajax('/ratings')/** * 获取商家商品数组 */export const reqShopGoods = () =&gt; ajax('/goods')再写一套用来管理从后台接收到的数据vuex配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// 1. stategoods: [], // 商品列表ratings: [], // 商家评价列表info: &#123;&#125; // 商家信息// 2. mutations-typeexport const RECEIVE_GOODS = 'receive_goods' // 接收商品数组export const RECEIVE_RATINGS = 'receive_ratings' // 接收商家评价数组export const RECEIVE_INFO = 'receive_info' // 接收商家信息// 3. mutations[RECEIVE_INFO] (state, &#123;info&#125;) &#123; state.info = info&#125;,[RECEIVE_RATINGS] (state, &#123;ratings&#125;) &#123; state.ratings = ratings&#125;,[RECEIVE_GOODS] (state, &#123;goods&#125;) &#123; state.goods = goods&#125;// 4. action// 异步获取商家信息 async getShopInfo (&#123;commit&#125;) &#123; const result = await reqShopInfo() if (result.code === 0) &#123; const info = result.data commit(RECEIVE_INFO, &#123;info&#125;) &#125; &#125;, // 异步获取商家评价列表 async getShopRatings (&#123;commit&#125;) &#123; const result = await reqShopRatings() if (result.code === 0) &#123; const ratings = result.data commit(RECEIVE_RATINGS, &#123;ratings&#125;) &#125; &#125;, // 异步获取商家商品列表 async getShopGoods (&#123;commit&#125;) &#123; const result = await reqShopGoods() if (result.code === 0) &#123; const goods = result.data commit(RECEIVE_GOODS, &#123;goods&#125;) &#125; &#125;在shop.vue中测试获取商家信息数据1234// 可以在控制台的vuex中查看到info数据mounted () &#123; this.$store.dispatch('getShopInfo')&#125;14.3 ShopHeader模板已经可以获取到mock的模拟数据，接下来开始修改商家界面的头部模板修改完模版和样式代码，然后读取vuex里的数据123456import &#123;mapState&#125; from 'vuex'export default &#123; computed: &#123; ...mapState(['info']) &#125;&#125;并将info里的数据渲染到模版中，其中有几点需要注意为nav动态绑定背景style(删除原来的样式里的背景图片)1:style="&#123;backgroundImage: `url($&#123;info.bgImg&#125;)`&#125;"在style里定义三种不同颜色的优惠活动的类名并放进数组，然后把它们和info.supports.type关联起来123456data () &#123; return &#123; // 注意顺序要与info的type对应 supportClasses: ['activity-green', 'activity-red', 'activity-orange'] &#125;&#125;12&lt;div class="activity" :class="supportClasses[info.supports[0].type]"&gt;&lt;/div&gt;这样写会报一个错误Error in render: &quot;TypeError: Cannot read property &#39;0&#39; of undefined&quot;因为vuex的数据是异步的，而页面刚加载时info为空对象，info.supports不存在，为undefined。所以再取它下标为0的值会报这个错误。(二级表达式info.bgImg并不会报错)使用v-if来避免没有数据时也会解析模版1&lt;div class="shop-header-discounts" v-if="info.supports" @click="toggleSupportShow"&gt;&lt;/div&gt;利用shopShow和supportShow来标识模态框和优惠活动列表是否显示，同时定义切换显隐的方法123456789101112131415data () &#123; return &#123; ... shopShow: false, supportShow: false &#125;&#125;，methods: &#123; toggleShopShow () &#123; this.shopShow = !this.shopShow &#125;, toggleSupportShow () &#123; this.supportShow = !this.supportShow &#125;&#125;可以为弹窗添加一个transition动画(activity-sheet一样)123&lt;transition name="fade"&gt; &lt;div class="shop-brief-modal" v-show="shopShow"&gt;&lt;/div&gt;&lt;/transition&gt;然后找到shop-brief-modal的样式 添加动画过程1234567&amp;.fade-enter-active, &amp;.fade-leave-active &#123; transition: opacity 0.5s; &#125;&amp;.fade-enter, &amp;.fade-leave-to &#123; opacity: 0; &#125;14.4 异步显示ShopGoods数据完成了头部的ShopHeader，接下来是点餐部分的ShopGoods组件。此组件是一个比较复杂的路由组件，主要包含了3个部分：ShopCart组件（底部的购物车）、CartControl组件（购物车里的加减商品按钮组件）、Food组件（点击商品图片查看详细信息的弹窗）另外还使用了第三方库 better-scroll: 处理UI 滑动左右结构的模版布局12345678910111213141516171819202122232425262728293031323334&lt;div class="goods"&gt; &lt;!-- 左侧的菜单选项--&gt; &lt;div class="menu-wrapper" ref="menuWrapper"&gt; &lt;!-- 菜单对应的是食物分类列表--&gt; &lt;ul&gt; &lt;li&gt;折扣&lt;/li&gt; &lt;li&gt;优惠&lt;/li&gt; &lt;li&gt;爽口凉菜&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;!-- 右侧的食物列表--&gt; &lt;div class="foods-wrapper" ref="foodsWrapper"&gt; &lt;!-- 右侧的食物列表是根据左侧的分类列表展现的--&gt; &lt;!-- 所以右侧是在一个分类标题列表里面嵌套着各类食物列表--&gt; &lt;ul&gt; &lt;li class="food-list-hook"&gt; &lt;h1 class="title"&gt;折扣&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;南瓜粥&lt;/li&gt; &lt;li&gt;红豆薏米美肤粥&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class="food-list-hook"&gt; &lt;h1 class="title"&gt;优惠&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;红枣山药&lt;/li&gt; &lt;li&gt;...&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;其他分类...&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;请求并读取数据进行模版渲染12345678910import &#123;mapState&#125; from 'vuex'export default &#123; mounted () &#123; // 使用 axios 请求 mockjs 提供的接口 this.$store.dispatch('getShopGoods') &#125;, computed: &#123; ...mapState(['goods']) &#125;&#125;1234567&lt;li class="menu-item" v-for="(good, index) in goods" :key="index"&gt; &lt;span class="text bottom-border-1px"&gt; &lt;img class="icon" :src="good.icon" v-if="good.icon"&gt; &#123;&#123;good.name&#125;&#125; &lt;/span&gt;&lt;/li&gt;&lt;!-- 右侧的模版渲染同上--&gt;14.5 完成用户交互功能修改当前食品分类的样式当滑动右侧食品列表时，更新左侧的当前分类点击左侧某个分类，右侧列表滑动到指定位置12&lt;!--current是标识当前分类的class 而它的值应该是一个计算后的布尔值--&gt;&lt;li class="menu-item" :class="&#123;current: index===currentIndex&#125;" &gt;&lt;/li&gt;设计计算属性：currentIndex根据哪些数据来进行计算？既然要实现左右两侧的联动，那么首先要获取一些位置信息。scrollY: 右侧食品列表滑动的Y轴坐标（滑动过程中实时变化） tops: 所有右侧分类标题到屏幕顶部的距离，即li的top值组成的数组 （列表第一次显示后就不再变化）在滑动过程中，实时收集scrollY列表第一次显示后，收集tops实现currentIndex的计算逻辑使用better-scroll实现回弹滑动npm install --save better-scroll中文官网12345678910111213141516import BScroll from 'better-scroll'// 要考虑列表显示之后创建BScroll实例的时机//（参考12.2解决swiper的bug，之前使用watch和nextTick来监听数据更新）// 这里使用另一种方法 通过action的回调函数来通知组件数据已经更新mounted() &#123; this.$store.dispatch('getShopGoods', () =&gt; &#123;// 数据更新后执行 this.$nextTick(() =&gt; &#123; // 列表数据更新显示后执行 new BScroll('.menu-wrapper', &#123; click: true &#125;) new BScroll('.foods-wrapper', &#123; click: true &#125;) &#125;) &#125;) &#125;,1234567891011//同时也要修改getShopGoods这个action// 异步获取商家商品列表async getShopGoods (&#123;commit&#125;, callback) &#123; const result = await reqShopGoods() if (result.code === 0) &#123; const goods = result.data commit(RECEIVE_GOODS, &#123;goods&#125;) // 数据更新了, 通知一下组件 callback &amp;&amp; callback() &#125;&#125;收集scrollY和tops12345678910111213141516171819// 要收集滚动的数据，那么就要利用betterScroll对象来监听滚动事件_initScroll() &#123; // 列表显示之后创建 new BScroll('.menu-wrapper', &#123; click: true &#125;) // 根据文档配置scroll选项 this.foodsScroll = new BScroll('.foods-wrapper', &#123; probeType: 2, // 因为惯性滑动不会触发 click: true &#125;) // 给右侧列表绑定scroll监听 this.foodsScroll.on('scroll', (&#123;x, y&#125;) =&gt; &#123; console.log(x, y) this.scrollY = Math.abs(y) &#125;)&#125; // 将其封装为初始化滚动的方法123456789101112131415161718// 初始化tops_initTops() &#123; // 1. 初始化tops const tops = [] let top = 0 // 第一个li的top为0 tops.push(top) // 2. 收集 // 在foods列表下找到所有分类的li const lis = this.$refs.foodsUl.getElementsByClassName('food-list-hook') Array.prototype.slice.call(lis).forEach(li =&gt; &#123; top += li.clientHeight tops.push(top) &#125;) // 3. 更新数据 this.tops = tops&#125;完成计算属性currentIndex的逻辑1234567891011121314151617181920currentIndex () &#123; // 初始和相关数据发生了变化 // 得到条件数据 const &#123;scrollY, tops&#125; = this // 根据条件计算产生一个结果 const index = tops.findIndex((top, index) =&gt; &#123; // scrollY&gt;=当前top &amp;&amp; scrollY&lt;下一个top return scrollY &gt;= top &amp;&amp; scrollY &lt; tops[index + 1] &#125;) // 返回结果(也就是当前的scrollY值属于第几个li区间) return index&#125;// 此时可以实现滑动右侧列表更新左侧当前分类// 但如果快速滑动则会出现因为惯性滑动不能正确收集scrollY值的bug// 解决方法一：将probeType的值改为3 但如果不想实现监听惯性滑动触发大量事件，则需要计算滑动结束时的scrollY值来确定当前分类// 在_initScroll里给右侧列表绑定scroll结束的监听this.foodsScroll.on('scrollEnd', (&#123;x, y&#125;) =&gt; &#123; console.log('scrollEnd', x, y) this.scrollY = Math.abs(y)&#125;)实现点击左侧分类滑动右侧食物列表12&lt;!--首先为li绑定click事件--&gt;&lt;li class="menu-item" :class="&#123;current: index===currentIndex&#125;" @click="clickMenuItem(index)"&gt;&lt;/li&gt;12345678clickMenuItem (index) &#123; // 得到目标位置的scrollY const scrollY = this.tops[index] // 立即更新scrollY(让点击的分类项成为当前分类) this.scrollY = scrollY // 平滑滑动右侧列表 better-scroll里的方法 this.foodsScroll.scrollTo(0, -scrollY, 300)&#125;14.6 CartControl组件完成加减选购食物的组件12345678&lt;div class="cartcontrol"&gt; &lt;!-- 有一个动画--&gt; &lt;transition name="move"&gt; &lt;div class="iconfont icon-remove_circle_outline"&gt;&lt;/div&gt; &lt;/transition&gt; &lt;div class="cart-count" &gt;&lt;/div&gt; &lt;div class="iconfont icon-add_circle"&gt;&lt;/div&gt;&lt;/div&gt;分析该组件接收的props123456789101112// 组件里更改的数据分别对应每一种食物，所以不应该是简单的Number类型的count，而应该是food对象（该组件为其添加food.count属性）props: &#123; food: Object &#125;,// 为加减按钮绑定的点击事件methods: &#123; updateFoodCount (isAdd) &#123; // 这里不能直接处理food.count因为food是在good里的数据对象 // 应该通过vuex触发action来管理数据 并把当前的food对象参数传递过去 this.$store.dispatch('updateFoodCount', &#123;isAdd, food: this.food&#125;) &#125; &#125;为food添加一个新的绑定数据count12345678910111213141516171819202122232425262728293031//省略mutation-types里定义常量的过程// action中同步更新food中的count值 updateFoodCount (&#123;commit&#125;, &#123;isAdd, food&#125;) &#123; if (isAdd) &#123; commit(INCREMENT_FOOD_COUNT, &#123;food&#125;) &#125; else &#123; commit(DECREMENT_FOOD_COUNT, &#123;food&#125;) &#125; &#125;// mutation中更改数据（注意引入vue）import Vue from 'vue'[INCREMENT_FOOD_COUNT] (state, &#123;food&#125;) &#123; if (!food.count) &#123; // 第一次增加 // food.count = 1 // 这样新增的属性没有数据绑定 /* 对象 属性名 属性值 */ Vue.set(food, 'count', 1) // 让新增的属性也有数据绑定 &#125; else &#123; food.count++ &#125; &#125;[DECREMENT_FOOD_COUNT] (state, &#123;food&#125;) &#123; if (food.count) &#123; // 只有有值才去减 food.count-- &#125; &#125;14.7 Food组件点击某个食品，弹出该Food弹窗组件展示该食品的信息并可将其加入购物车1234567891011121314151617181920212223export default &#123; // 要展示食品信息，所以要接收food对象的数据 props: &#123; food: Object &#125;, data () &#123; return &#123; isShow: false &#125; &#125;, methods: &#123; // Food组件内控制显示Food组件的方法 toggleShow () &#123; this.isShow = !this.isShow &#125; &#125;, components: &#123; CartControl &#125; &#125;在ShopGoods中引用该组件1234567891011121314&lt;div&gt; &lt;div class="goods"&gt; ... &lt;div class="foods-wrapper"&gt; ... &lt;ul&gt; &lt;!--为每个食品li添加点击事件 触发显示Food弹窗--&gt; &lt;li class="food-item" @click="showFood(food)"&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- 该组件与goods同级--&gt; &lt;Food :food="food" ref="food"/&gt;&lt;/div&gt;注意每个li里的CartControl 组件都使用@click.stop 来阻止了事件冒泡，就是为了防止点击加减按钮同时触发弹出Food组件同时控制是否显示Food组件(其实可以直接在Food组件上使用v-if，这里是为了练习在父组件中得到子组件对象并调用其方法)1234567// 显示点击的foodshowFood (food) &#123; // 设置要传递给food组件的数据 this.food = food // 显示food组件 (在父组件中调用子组件对象的方法) this.$refs.food.toggleShow()&#125;14.8 ShopCart组件购物车组件中存放的都是count大于0的food,这些数据既可以通过vuex来管理，也可以使用computed来动态计算goods里每个food的count来管理。但computed要经过两层的轮询而且还要考虑数据量的问题，所以还是使用vuex来管理这些cartFoods数据的效率更高。另外要定义几个Getters来设置购物车的一些数据信息1234567891011export default &#123; totalCount (state) &#123; return state.cartFoods.reduce((preTotal, food) =&gt; preTotal + food.count, 0) &#125;, totalPrice (state) &#123; return state.cartFoods.reduce((preTotal, food) =&gt; preTotal + food.count * food.price, 0) &#125;, positiveSize (state) &#123; return state.ratings.reduce((preTotal, rating) =&gt; preTotal + (rating.rateType === 0 ? 1 : 0), 0) &#125;&#125;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748computed: &#123; // 在购物车中获取到cartFoods的state 以及商家的info ...mapState(['cartFoods', 'info']), // 获取相应的Getters里的数据 ...mapGetters(['totalCount', 'totalPrice']), // 通过计算已购食品来设置购物车不同的样式和提示文字 payClass () &#123; const &#123;totalPrice&#125; = this const &#123;minPrice&#125; = this.info return totalPrice&gt;=minPrice ? 'enough' : 'not-enough' &#125;, payText () &#123; const &#123;totalPrice&#125; = this const &#123;minPrice&#125; = this.info if(totalPrice===0) &#123; return `￥$&#123;minPrice&#125;元起送` &#125; else if(totalPrice&lt;minPrice) &#123; return `还差￥$&#123;minPrice-totalPrice&#125;元起送` &#125; else &#123; return '结算' &#125; &#125;, &#125;,watch: &#123; totalCount: function () &#123; // 如果总数量为0, 直接不显示 if (this.totalCount === 0) &#123; this.isShow = false // return false &#125; &#125;, isShow: function () &#123; if (this.isShow) &#123; this.$nextTick(() =&gt; &#123; // 实现BScroll的实例是一个单例 if (!this.scroll) &#123; this.scroll = new BScroll('.list-content', &#123; click: true &#125;) &#125; else &#123; this.scroll.refresh() // 让滚动条刷新一下: 重新统计内容的高度 &#125; &#125;) &#125; return this.isShow &#125; &#125;注意：要保证购物车的列表是单例，不然打开多次购物车列表会初始化多个实例，然后再点击会触发多次点击事件。引入mint-ui实现清空购物车的交互1234567// 注意CLEAR_CART的mutation不能仅仅把catFoods数组清空，还要先清空goods里food的count[CLEAR_CART] (state) &#123; // 清除food中的count state.cartFoods.forEach(food =&gt; &#123; food.count = 0 &#125;) // 移除购物车中所有购物项 state.cartFoods = [] &#125;14.9 ShopRatings组件商家评价组件分为上部的Star评分以及下面的用户评价信息列表123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// 先在mounted里通过触发action请求ratings数据mounted () &#123; // 为getShopRatings这个action添加回调函数 this.$store.dispatch('getShopRatings', () =&gt; &#123; this.$nextTick(() =&gt; &#123; new BScroll(this.$refs.ratings, &#123; click: true &#125;) &#125;) &#125;)&#125;,data () &#123; return &#123; onlyShowText: true, // 是否只显示有文本的 selectType: 2 // 选择的评价类型: 0满意, 1不满意, 2全部 &#125;&#125;,// 在computed里获取info和ratings的State数据以及返回好评数量的Getterscomputed: &#123; ...mapState(['info', 'ratings']), ...mapGetters(['positiveSize']), filterRatings () &#123; // 得到相关的数据 const &#123;ratings, onlyShowText, selectType&#125; = this // 产生一个过滤新数组 return ratings.filter(rating =&gt; &#123; const &#123;rateType, text&#125; = rating /* 条件1: selectType: 0/1/2 rateType: 0/1 全部 || 满意、不满意中的一种 selectType===2 || selectType===rateType 条件2 onlyShowText: true/false text: 有值/没值 符合条件一的全部评价 || 符合条件一的有文字的评价 !onlyShowText || text.length&gt;0 */ return (selectType === 2 || selectType === rateType) &amp;&amp; (!onlyShowText || text.length &gt; 0) &#125;) &#125;&#125;,// 可以在这里自己写过滤器filters: &#123; dateFormat:function (input) &#123; var d = new Date(input); var year = d.getFullYear(); var month = d.getMonth() + 1; var day = d.getDate() &lt;10 ? '0' + d.getDate() : '' + d.getDate(); var hour = d.getHours(); var minutes = d.getMinutes(); var seconds = d.getSeconds(); return year+ '-' + month + '-' + day + ' ' + hour + ':' + minutes + ':' + seconds; &#125;&#125;filterRatings 就是为要渲染的评价列表设置各种必要条件 使其按照用户选择进行渲染（即页面显示的列表要同时满足条件一与条件二）1234567891011121314// filters文件夹 也可以使用moment或date-fns(推荐)库来实现日期过滤// npm install moment/date-fns --saveimport Vue from 'vue'// import moment from 'moment'import format from 'date-fns/format'// 自定义过滤器Vue.filter('date-format', function (value, formatStr = 'YYYY-MM-DD HH:mm:ss') &#123; // return moment(value).format(formatStr) return format(value, formatStr)&#125;)// 在main.js文件中引入注册的过滤器import './filters'14.10 ShopInfo组件获取商家列表后就已经得到了商家信息info数据，但是还没有创建ShopInfo组件对象123456789// mounted之后创建BScroll对象mounted () &#123; // 如果数据还没有, 直接结束 if (!this.info.pics) &#123; return &#125; // 数据有了, 可以创建BScroll对象形成滑动 this._initScroll()&#125;同时要动态计算横向滑动的ul宽度123456789101112131415methods: &#123; _initScroll () &#123; new BScroll('.shop-info') // 动态计算ul的宽度 const ul = this.$refs.picsUl const liWidth = 120 const space = 6 const count = this.info.pics.length ul.style.width = (liWidth + space) * count - space + 'px' new BScroll('.pic-wrapper', &#123; scrollX: true // 水平滑动 &#125;) &#125;&#125;15. Search组件既然要实现搜索功能，那么就要有搜索请求的接口以及vuex数据12// api/index.js里 添加根据经纬度和关键字搜索商铺列表的接口export const reqSearchShop = (geohash, keyword) =&gt; ajax(BASE_URL+'/search_shops', &#123;geohash, keyword&#125;)123456789// 异步获取商家商品列表的actionasync searchShops (&#123;commit, state&#125;, keyword) &#123; const geohash = state.latitude + ',' + state.longitude const result = await reqSearchShop(geohash, keyword) if (result.code === 0) &#123; const searchShops = result.data commit(RECEIVE_SEARCH_SHOPS, &#123;searchShops&#125;) &#125;&#125;在Search组件中触发action12345678search () &#123; // 得到搜索关键字 const keyword = this.keyword.trim() // 进行搜索 if (keyword) &#123; this.$store.dispatch('searchShops', keyword) &#125; &#125;通过router-link将搜索结果searchShops渲染出来1234&lt;router-link :to="&#123;path:'/shop', query:&#123;id:item.id&#125;&#125;" tag="li" v-for="item in searchShops" :key="item.id" class="list_li"&gt; ...&lt;/router-link&gt;16. 项目优化/扩展16.1 缓存路由组件对象1234&lt;!-- 好处: 复用路由组件对象, 复用内存中路由组件获取的后台数据 --&gt;&lt;keep-alive&gt; &lt;router-view /&gt;&lt;/keep-alive&gt;16.2 路由组件懒加载我们写的所有Js文件最后都会打包成一个文件，而我们实际的需求是路由组件并不是一次全部加载过来，而是按需加载。所以就要在打包前就对代码进行分割，从而实现路由组件懒加载。1234567// router/index.js文件中 改变引入方式 实现路由组件懒加载const Msite = () =&gt; import('../pages/Msite/Msite.vue')const Search = () =&gt; import('../pages/Search/Search.vue')const Order = () =&gt; import('../pages/Order/Order.vue')const Profile = () =&gt; import('../pages/Profile/Profile.vue')// 此时的Msite等都是返回路由组件的函数，只有请求对应的路由路径时(第一次)才会执行此函数并加载路由组件此时切换路由，可以在控制台NetWork里看到拆分打包后的js文件实现了按需加载16.3 图片懒加载: vue-lazyload安装npm install --save vue-loader123456789// 在main.js文件中引入并注册插件import VueLazyload from 'vue-lazyload'// 将一张loading图片加载进来import loading from './common/img/loading.gif'Vue.use(VueLazyload, &#123; // 内部自定义一个指令lazy loading&#125;)// 在图片标签中使用 （Food组件）&lt;img v-lazy="food.image"&gt;16.4 打包文件分析与优化vue 脚手架提供了一个用于可视化分析打包文件的包 webpack-bundle-analyzer 和配置启用打包可视化: npm run build --report 可以根据可视化文件分析页面对项目进行优化]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Vue项目</tag>
        <tag>Web APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js]]></title>
    <url>%2F2019%2F08%2F07%2FNode-js%2F</url>
    <content type="text"><![CDATA[千里之行，始于足下。视频地址https://www.rails365.netb站常用链接Node.js 官网Node.js 中文网CNode：Node.js专业中文社区1.课程介绍与开发环境搭建主要包括nodejs 基础知识web 服务器异步 同步 阻塞 非阻塞课程基础javascript 基础html 基础命令行基础Node.js 介绍Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效Node.js 的包管理器 npm，是全球最大的开源库生态系统javascript 是脚本语言，需要解析器才能执行，浏览器就充当了解析器在Chrome中，解析器就是 V8 引擎，将 javascript 转换成 机器码V8 引擎是开源的，由 C++ 语言编写，性能高Node.js 高性能，事件驱动，非阻塞，生态圈很好Node.js 安装官网 下载安装即可，很小不到20M！验证是否成功，命令行输入 node -v 显示版本号如 v8.11.4按提示升级 npm，Update available 5.6.0 → 6.4.1， npm i -g npmmacOS 安装完提示如下1234This package has installed: • Node.js v8.11.4 to /usr/local/bin/node • npm v5.6.0 to /usr/local/bin/npmMake sure that /usr/local/bin is in your $PATH.Node.js 用途javascript 运行环境操作文件（grunt gulp webpack）操作数据库写后端 api命令行工具web 开发聊天室JavaScript 语句后应该加分号么？知乎讨论代码风格而已，没有定论少分号更易读，不累必须加分号情况很少见：一行开头是括号(或者方括号[的时候加上分号就可以了，其他时候都不要如果下一行的行首是( [ / + -之一的话，js不会自动在上一行句尾加上分号2.全局对象全局对象不用导入，直接使用的对象官方文档Buffer 类，用于处理二进制数据console，用于打印 stdout 和 stderrglobal, 全局的命名空间对象process，进程对象setTimeout(callback, delay[, …args])setInterval(callback, delay[, …args])setImmediate(callback[, …args])clearTimeout(timeoutObject)clearInterval(intervalObject)clearImmediate(immediateObject)以下变量虽然看起来像全局变量，但实际上不是全局变量在所有模块中均可使用以下对象作用域只在模块内，详见 module文档：__dirname__filenameexportsmodulerequire()运行 .js 脚本文件node app 或者 node app.js实践代码123456789101112131415161718192021222324252627282930313233console.log('hello world');setTimeout(function () &#123; console.log("3 seconds have passed 2");&#125;, 3000);// 箭头函数，es6的写法setTimeout(() =&gt; &#123; console.log("3 seconds have passed 1");&#125;, 3000);// 每间隔2秒不断执行setInterval(function () &#123; console.log("2 seconds have passed");&#125;, 2000);var time = 0var timer = setInterval(function () &#123; time += 2; console.log(time + " seconds have passed"); if (time &gt; 6) &#123; clearInterval(timer); console.log("clearInterval") &#125;&#125;, 2000)// 输出当前目录 和 带绝对路径的文件名console.log(__dirname)console.log(__filename)console.log('end')console.dir(global)3.回调函数1234567891011121314151617181920212223function sayHi() &#123; console.log('Hi')&#125;sayHi() // 调用函数// 将匿名函数赋给变量var sayBye = function (name) &#123; console.log(name + ' Bye')&#125;sayBye()// 第一个参数是函数function callFunction(fun, name) &#123; fun(name)&#125;callFunction(sayBye, 'able')// 或者callFunction(function (name) &#123; console.log(name + ' Bye')&#125;, 'able')4.模块module 对象每个文件都被视为独立的模块每个模块中，module 指向表示当前模块的对象的引用module 实际上不是全局的，而是每个模块本地的module.exports 导出模块内的对象，方便其他对象引用require() 引入模块当 Node.js 直接运行一个文件时，require.main 会被设为它的 module可以通过 require.main === module 来判断一个文件是否被直接运行module 提供了一个 filename 属性（通常等同于 __filename）可以通过检查 require.main.filename 来获取当前应用程序的入口点123456789101112131415161718192021222324252627282930313233343536373839// counter.jsvar counter = function (arr) &#123; return "There are " + arr.length + " elements in array"&#125;var adder = function (a, b) &#123; return `the sum of the 2 numbers is $&#123;a+b&#125;`&#125;var pi = 3.14// 只有一个时可以这样导入// module.exports = counter/*module.exports.counter = countermodule.exports.adder = addermodule.exports.pi = pi*/module.exports = &#123; counter: counter, adder: adder, pi: pi,&#125;/* 对象可以简写module.exports = &#123; counter, adder, pi,&#125;*///p4.jsvar stuff = require('./count')console.log(stuff.counter(['ruby', 'nodejs', 'react']))console.log(stuff.adder(3, 2))console.log(stuff.pi)5.事件 events多数 Node.js 核心 API 都采用异步事件驱动架构所有能触发事件的对象都是 EventEmitter 类的实例事件名称通常是驼峰式的字符串实践代码12345678910111213141516171819202122232425262728293031323334353637var events = require('events')var util = require('util')// 事件 对象var myEmitter = new events.EventEmitter()// 绑定 事件名称 和 回调函数myEmitter.on('someEvent', function (message) &#123; console.log(message)&#125;)// 触发实践，使用事件名称myEmitter.emit('someEvent', 'The event was emitted')// 创建对象var Person = function (name) &#123; this.name = name&#125;// 继承，让Person类具有事件对象的特性，绑定和触发事件util.inherits(Person, events.EventEmitter)// 新建对象var xiaoming = new Person('xiaoming')var lili = new Person('lili')var person = [xiaoming, lili]// 循环person数组，绑定事件person.forEach(function (person) &#123; person.on('speak', function (message) &#123; console.log(person.name + ' said: ' + message) &#125;)&#125;)// 触发事件xiaoming.emit('speak', 'hi')lili.emit('speak', 'I want a curry')6.读写文件（同步和异步）1234567891011121314151617181920var fs = require('fs')// 同步读写文件，顺序执行，如果读取时间很长，会阻塞进程var readMe = fs.readFileSync('readMe.txt', 'utf8')fs.writeFileSync('writeMe.txt', readMe)console.log(readMe)console.log('finished sync')// 异步读写文件// 异步事件，Nodejs 维护一个事件队列，注册事件，完成后执行主线程// 当主线程空闲时，取出执行事件，从线程池中发起线程执行事件， 当事件执行完成后通知主线程。这就是异步高效的原因。var readMe = fs.readFile('readMe.txt', 'utf8', function (err, data) &#123; fs.writeFile('writeMe.txt', data, function () &#123; console.log('writeMe has finished') &#125;)&#125;)console.log('end')7.创建和删除目录fs - 文件系统 API 文档12345678910111213141516171819var fs = require('fs')// 异步删除文件fs.unlink('writeMe.txt', function () &#123; console.log('delete writeMe.txt file')&#125;)// 同步创建和删除目录fs.mkdirSync('stuff')fs.rmdirSync('stuff')// 异步fs.mkdir('stuff', function () &#123; fs.readFile('readMe.txt', 'utf8', function (err, data) &#123; fs.writeFile('./stuff/writeMe.txt', data, function () &#123; console.log('copy successfully') &#125;) &#125;)&#125;)8.流和管道流（stream）处理流式数据的抽象接口stream 模块提供了一些基础的 API，用于构建实现了流接口的对象流可以是可读的、可写的、或是可读写的，所有的流都是 EventEmitter 的实例流处理数据通过缓存可以提高性能]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>[object Object]</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[上传图片的四种方法]]></title>
    <url>%2F2019%2F08%2F02%2F%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[上传图片四种方法Ⅰ.PHP+表单Ⅱ.AJAX+PHPⅢ.拖放API+AJAX+图片预览+PHPⅡ.插件（新浪和百度）PHP+表单创建一个文件上传表单123456789101112131415&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;upload-img&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;upload_file.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;label for=&quot;file&quot;&gt;文件名：&lt;/label&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;有关上面的 HTML 表单的一些注意项列举如下：form 标签的 enctype 属性规定了在提交表单时要使用哪种内容类型。在表单需要二进制数据时，比如文件内容，请使用 “multipart/form-data”。input 标签的 type=”file” 属性规定了应该把输入作为文件来处理。举例来说，当在浏览器中预览时，会看到输入框旁边有一个浏览按钮。创建上传脚本“upload_file.php” 文件含有供上传文件的代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?php// 允许上传的图片后缀$allowedExts = array(&quot;gif&quot;, &quot;jpeg&quot;, &quot;jpg&quot;, &quot;png&quot;);$temp = explode(&quot;.&quot;, $_FILES[&quot;file&quot;][&quot;name&quot;]);echo $_FILES[&quot;file&quot;][&quot;size&quot;];$extension = end($temp); // 获取文件后缀名if ((($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/gif&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpeg&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpg&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/pjpeg&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/x-png&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/png&quot;))&amp;&amp; ($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 204800) // 小于 200 kb&amp;&amp; in_array($extension, $allowedExts))&#123; if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0) &#123; echo &quot;错误：: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br&gt;&quot;; &#125; else &#123; echo &quot;上传文件名: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br&gt;&quot;; echo &quot;文件类型: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br&gt;&quot;; echo &quot;文件大小: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; kB&lt;br&gt;&quot;; echo &quot;文件临时存储的位置: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;] . &quot;&lt;br&gt;&quot;; // 判断当期目录下的 upload 目录是否存在该文件 // 如果没有 upload 目录，你需要创建它，upload 目录权限为 777 if (file_exists(&quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;])) &#123; echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; 文件已经存在。 &quot;; &#125; else &#123; // 如果 upload 目录不存在该文件则将文件上传到 upload 目录下 //这里是将$_FILES[&quot;file&quot;][&quot;tmp_name&quot;]内的临时路径值， //换为自己相存储的路径值&quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]); echo &quot;文件存储在: &quot; . &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]; &#125; &#125;&#125;else&#123; echo &quot;非法的文件格式&quot;;&#125;?&gt;在这个脚本中，我们增加了对文件上传的限制。用户只能上传 .gif、.jpeg、.jpg、.png 文件，文件大小必须小于 200 kB：在服务器的 PHP 临时文件夹中创建了一个被上传文件的临时副本。这个临时的副本文件会在脚本结束时消失。要保存被上传的文件，我们需要把它拷贝到另外的位置：通过使用 PHP 的全局数组 $_FILES，你可以从客户计算机向远程服务器上传文件。第一个参数是表单的 input name，第二个下标可以是 “name”、”type”、”size”、”tmp_name” 或 “error”。如下所示：$_FILES[“file”][“name”] - 上传文件的名称$_FILES[“file”][“type”] - 上传文件的类型$_FILES[“file”][“size”] - 上传文件的大小，以字节计$_FILES[“file”][“tmp_name”] - 存储在服务器的文件的临时副本的名称$_FILES[“file”][“error”] - 由文件上传导致的错误代码PHP+ajax+jQueryHTML文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;!--利用cdn添加js和css库 --&gt; &lt;script src=&quot;jquery-1.11.3.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body style=&quot;text-align: center; padding: 100px;&quot;&gt;选择图片：&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; accept=&quot;image/gif,image/png,image/jpg,image/jpeg&quot;&gt;&lt;br&gt;&lt;button id=&quot;send&quot;&gt;提交&lt;/button&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/body&gt;&lt;script type=&quot;text/javascript&quot;&gt; $(&quot;#send&quot;).click(function () &#123; //提交实践 var file1 = document.getElementById(&apos;file&apos;).files[0]; //获取文件路径名，注意了没有files[1]这回事，已经试过坑 //var file1 = $(&quot;#file&quot;)[0].files[0]; //这句跟上一面那句作用一样 //console.log(document.getElementById(&apos;file&apos;).files[0].name); //console.log(document.getElementById(&apos;file&apos;).files[0].size); //console.log(document.getElementById(&apos;file&apos;).files[0].type); //console.log(document.getElementById(&apos;file&apos;).files[0].lastModifiedDate); var formData = new FormData(); formData.append(&apos;file&apos;, file1); $.ajax(&#123; type: &quot;POST&quot;, url: &quot;server.php&quot;, //同目录下的php文件 data: formData, dataType: &quot;json&quot;, //声明成功使用json数据类型回调 //如果传递的是FormData数据类型，那么下来的三个参数是必须的，否则会报错 cache: false, //默认是true，但是一般不做缓存 processData: false, //用于对data参数进行序列化处理，这里必须false；如果是true，就会将FormData转换为String类型 contentType: false, //一些文件上传http协议的关系，自行百度，如果上传的有文件，那么只能设置为false success: function (msg) &#123; //请求成功后的回调函数 alert(msg.file); &#125; &#125;); &#125;);&lt;/script&gt;&lt;/html&gt;server.PHP文件12345678910111213141516171819202122232425262728293031323334header(&quot;Access-Control-Allow-Origin:*&quot;);header(&quot;Content-Type:application/json;charset=utf-8&quot;);$f_size=$_FILES[&quot;file&quot;][&quot;size&quot;];if((!$_FILES == null) &amp;&amp; ($f_size&lt;1024*1024*2)&amp;&amp; (($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/gif&quot;) || ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpeg&quot;) || ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpg&quot;) || ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/pjpeg&quot;) || ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/x-png&quot;) || ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/png&quot;)))&#123; $temp = explode(&quot;.&quot;, $_FILES[&quot;file&quot;][&quot;name&quot;]); if (file_exists(&quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))&#123; $str[&quot;msg&quot;]=$_FILES[&quot;file&quot;][&quot;name&quot;].&quot;文件已经存在。&quot;; echo json_encode($str); &#125; else &#123; // 如果 upload 目录不存在该文件则将文件上传到 upload 目录下 $temp = explode(&quot;.&quot;, $_FILES[&quot;file&quot;][&quot;name&quot;]); $extension = end($temp); //为图片修改名字 $n_name=time().&apos;_&apos;.rand(1,9999).&apos;.&apos;.$extension; move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], &quot;upload/&quot; . $n_name); $str[&quot;msg&quot;]=&quot;文件存储在: &quot; . &quot;upload/&quot; . $n_name; echo json_encode($str); &#125;&#125;else&#123; $str[&quot;msg&quot;]=&quot;请重新上传&quot;; echo $str;&#125;?&gt;拖放API+AJAX+图片预览+PHPHTML文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;拖拽图片上传&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;style type=&quot;text/css&quot;&gt; * &#123; margin: 0; padding: 0; list-style: none; &#125; #box &#123; height: 300px; width: 800px; margin: 10px auto; background: #F0F8FF; padding: 50px; &#125;&lt;/style&gt;&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script src=&quot;jquery-1.11.3.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; window.onload=function() &#123; var box = document.getElementById(&apos;box&apos;); box.ondragover = function (e) &#123; e.preventDefault(); &#125;; /*box.οndrοp=function(e)&#123; e.preventDefault(); var file = e.target.files?e.target.files[0]:e.dataTransfer.files[0]; var f = e.dataTransfer.files[0]; fileType = f.type; fileSize = f.size; reader = new FileReader(); var maxsize = 20480; var reg = /(image)/; if(!reg.test(fileType))&#123; alert(&apos;不是正确的数据类型！&apos;); return false; &#125; if(fileSize&gt;maxsize*1024)&#123; alert(&apos;素材大于&apos;+maxsize+&apos;KB&apos;); return false; &#125; var fr = new FileReader(); fr.readAsDataURL(f); fr.οnlοad=function(e)&#123; var Url = this.result; console.log(Url); box.innerHTML+=&apos;&lt;img src=&quot;&apos;+Url+&apos;&quot; alt=&quot;&quot; width=&quot;200&quot; height=&quot;200&quot; style=&quot;margin:10px;&quot;&gt;&apos;; &#125; var form = new FormData(); form.append(&quot;file&quot;, f); $.ajax(&#123; type:&quot;post&quot;, url:&quot;upload_image.php&quot;, data:form, processData:false, contentType:false, success:function(data)&#123; if(data)&#123; alert(&apos;上传成功&apos;); &#125; &#125; &#125;); &#125;*/ box.ondrop = function (e) &#123; e.preventDefault(); var f = e.dataTransfer.files[0]; var fileReader = new FileReader(); fileReader.onload = function (e) &#123; console.log(fileReader.result); box.innerHTML += &quot;&lt;img src=\&quot;&quot; + fileReader.result + &quot;\&quot;&gt;&quot;; &#125;; fileReader.readAsDataURL(f); var form = new FormData(); form.append(&quot;file&quot;, f); $.ajax(&#123; type:&quot;post&quot;, url:&quot;server.php&quot;, data:form, processData:false, contentType:false, success:function(data)&#123; if(data)&#123; alert(data.msg); &#125; &#125; &#125;); &#125;; &#125;&lt;/script&gt;PHP文件同上]]></content>
      <categories>
        <category>WEB</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[复现商城后台管理平台的小tips]]></title>
    <url>%2F2019%2F07%2F20%2F%E5%A4%8D%E7%8E%B0%E5%95%86%E5%9F%8E%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0%E7%9A%84%E5%B0%8Ftips%2F</url>
    <content type="text"><![CDATA[千里之行，始于足下。preg_match的使用12345preg_match(&quot;/(\w)+/&quot;,&quot;abc&quot;,$search);print_r($search);显示结果(只匹配一次，只要匹配到立即停止):Array( [0] = a [1] = a)元素高度、宽度计算元素宽度=左右外边距+左右边框+左右内边距+元素内容高度；元素高度=上下外边距+上下边框+上下内边距+元素内容宽度；重要属性：box-sizing（指定框模型计算方式）默认值：content-box 采用上述方式计算；css所定义的属性width、height为元素内容宽高；另外一个值：border-boxcss所定义的属性width、height为元素宽度。父元素相对定位 子元素绝对定位相对定位：相对与原来的位置绝对定位：相对于离他最近的已定位的祖先元素实现位置的偏移参考上级已经定位的元素位置定位如果上级都没有定位，则绝对定位的元素相对于body定位已定位的元素：将position设置为relative/absolute/fixed中任何一种外边距合并12345678&lt;body&gt; &lt;div&gt;123&lt;/div&gt;&lt;/body&gt;&lt;style&gt; div&#123; margin-top:200px; &#125;&lt;/style&gt;由于body与div之间没有任何的元素，则body和div的margin-top相遇会合并，取较大值，此时body的margin-top为200px；网站标识1&lt;link rel=&quot;icon&quot; href=&quot;...icon&quot;&gt;菜单栏永远出现在底部12345菜单栏：height: ** px; position：fixed; bottom: 0;固定定位fixed：位置不会随滚动条改变而改变，固定在可视化区域；他的left/right/top/bottom也是相对于整个可视化界面而言，不是整个bodywindow.onscroll事件在窗口发生滚动时自动调用$(“..”).offsetTop 计算当前元素距离顶端距离运行php报错跳转下载页面：header写错json格式有误：前后有空格会报错文本内容要显示为 xxxxx…123overflow:hidden;white-space:nowrap;text-overflow:ellipsis;为动态创建的元素绑定点击事件由于是动态创建，则不能直接绑定，需要用事件代理（on），绑定在静态父元素上]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>商城后台管理平台</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用HTML5+定时器实现进度条效果]]></title>
    <url>%2F2019%2F07%2F19%2F%E4%BD%BF%E7%94%A8HTML5-%E5%AE%9A%E6%97%B6%E5%99%A8%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[HTML5+定时器1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;定时器+进度条&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;progress id=&quot;progress&quot; value=&quot;0&quot;&gt;&lt;/progress&gt; &lt;span id=&quot;precent&quot;&gt;0%&lt;/span&gt;&lt;/body&gt;&lt;script&gt; var prog=document.getElementById(&quot;progress&quot;); var precent=document.getElementById(&quot;precent&quot;); var val=0; var timer = setInterval(function()&#123; val++; if(val&gt;=100)&#123; clearInterval(timer); val=100; &#125; prog.value = val/100; precent.innerHTML=val+&apos;%&apos;; &#125;,100)&lt;/script&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>定时器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+NexT 打造自己的博客]]></title>
    <url>%2F2019%2F07%2F18%2FHexo%2BNexT%20%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo+NexTGitHub创建个人仓库登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：Build software better, together 点击GitHub中的New repository创建新仓库，仓库名应该为：用户名.http://github.io 这个用户名使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：wh724.github.io。安装Git我们网站在本地搭建好了，需要使用Git同步到GitHub上。Git下载从Git官网下载：Git - Downloading Package选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。Git Bash安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash。git config –global user.name “你的GitHub用户名”git config –global user.email “你的GitHub注册邮箱”生成ssh密钥文件ssh-keygen -t rsa -C “你的GitHub注册邮箱”然后直接三个回车即可，默认不需要设置密码然后找到生成的用户/用户名/.ssh/的文件夹中的id_rsa.pub密钥，将内容全部复制打开GitHub_Settings_keys页面，新建new SSH KeyTitle为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。在Git Bash中检测GitHub公钥设置是否成功，输入 ssh git@github.com ：如上则说明成功。安装Node.jsHexo基于Node.js，Node.js下载地址：Download | Node.js 下载安装包，注意安装Node.js会包含环境变量及npm的安装。安装后，检测Node.js是否安装成功，在命令行中输入 node -v :检测npm是否安装成功，在命令行中输入npm -v :到这了，安装Hexo的环境已经全部搭建完成。Hexo安装HexoHexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行使用npm命令安装Hexo，输入：123npm install -g hexo-cli``` 这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入hexo init blog123注意，这里的命令都是作用在刚刚创建的Blog文件夹中。为了检测我们的网站雏形，分别按顺序输入以下三条命令：hexo new test_my_sitehexo ghexo s12这些命令在后面作介绍，完成后，打开浏览器输入地址：```localhost:4000可以看出我们写出第一篇博客，只不过我下图是我修改过的配置，和你的显示不一样。Hexo 命令123npm install hexo -g #安装Hexonpm update hexo -g #升级 hexo init #初始化博客命令简写123456789101112hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。推送网站上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为站点配置文件.进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件。下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：1234deploy: type: gitrepo: git@github.com:+你的github名称/名称.github.io.gitbranch: master保存站点配置文件。其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：install hexo-deployer-git --save```12这时，我们分别输入三条命令：hexo cleanhexo ghexo d123456其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 http://xxxx.github.io。你就会发现你的博客已经上线了，可以在网络上被访问了。## 更换主题如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：&lt;a href=&quot;https://hexo.io/themes/&quot;&gt;Themes&lt;/a&gt; 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：```git clone https://github.com/iissnan/hexo-theme-next themes/next这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开站点的_config.yml配置文件，修改主题为next打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settingsnext主题有三个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。主题进阶UpUpUp站点配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: Space Portsubtitle: welcome to my space station!description: This is lonely,but it`s your own.keywords:author: WHlanguage: zh-Hanstimezone:# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://github.com/wh724root: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 10 order_by: -date # Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: next# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:wh724/wh724.github.io.git branch: master# hexo-generator-searchdb@1.0.8search: path: search.xml field: post format: html content: true#静态资源压缩优化# hexo-neatneat_enable: true # 启用neat# 对html优化neat_html: enable: true exclude: # 对css优化neat_css: enable: true exclude: - &apos;*.min.css&apos;# 对js优化neat_js: enable: true mangle: true output: compress: exclude: - &apos;*.min.js&apos;主题配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589590591592593594595596597598599600601602603604605606607608609610611612613614615616617618619620621622623624625626627628629630631632633634635636637638639640641642643644645646647648649650651652653654655656657658659660661662663664665666667668669670671672673674675676677678679680681682683684685686687688689690691692693694695696697698699700701702703704705706707708709710711712713714715716717718719720721722723724725726727728729730731732733734735736737738739740741742743744745746747748749750751752753754755756757758759760761762763764765766767768769770771772773774775776777778779780781782783784785786787788789790791792793794795796797798799800801802803804805806807808809810811812813814815816817818819820821822823# ===============================================================# ========================= ATTENTION! ==========================# ===============================================================# NexT repository is moving here: https://github.com/theme-next# ===============================================================# It&apos;s rebase to v6.0.0 and future maintenance will resume there# ===============================================================# ---------------------------------------------------------------# Theme Core Configuration Settings# ---------------------------------------------------------------# Set to true, if you want to fully override the default configuration.# Useful if you don&apos;t want to inherit the theme _config.yml configurations.override: false# ---------------------------------------------------------------# Site Information Settings# ---------------------------------------------------------------# To get or check favicons visit: https://realfavicongenerator.net# Put your favicons into `hexo-site/source/` (recommend) or `hexo-site/themes/next/source/images/` directory.# Default NexT favicons placed in `hexo-site/themes/next/source/images/` directory.# And if you want to place your icons in `hexo-site/source/` root directory, you must remove `/images` prefix from pathes.# For example, you put your favicons into `hexo-site/source/images` directory.# Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.favicon: small: /images/favicon-16x16-next.png medium: /images/favicon-32x32-next.png apple_touch_icon: /images/apple-touch-icon-next.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml# Set default keywords (Use a comma to separate)keywords: Hexo,博客,生活,技术,代码# Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss:footer: # Specify the date when the site was setup. # If not defined, current year will be used. since: 2019 # Icon between year and copyright info. icon: user # If not defined, will be used `author` from Hexo main config. copyright: # ------------------------------------------------------------- # Hexo link (Powered by Hexo). powered: false theme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: false # Version info of NexT after scheme info (vX.X.X). version: true # ------------------------------------------------------------- # Any custom text can be defined here. #custom_text: Hosted by &lt;a target=&quot;_blank&quot; href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;# ---------------------------------------------------------------# SEO Settings# ---------------------------------------------------------------# Canonical, set a canonical link tag in your hexo, you could use it for your SEO of blog.# See: https://support.google.com/webmasters/answer/139066# Tips: Before you open this tag, remember set up your URL in hexo _config.yml ( ex. url: http://yourdomain.com )canonical: true# Change headers hierarchy on site-subtitle (will be main site description) and on all post/pages titles for better SEO-optimization.seo: false# If true, will add site-subtitle to index page, added in main hexo config.# subtitle: Subtitleindex_with_subtitle: false# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------# When running the site in a subdirectory (e.g. domain.tld/blog), remove the leading slash from link value (/archives -&gt; archives).# Usage: `Key: /link/ || icon`# Key is the name of menu item. If translate for this menu will find in languages - this translate will be loaded; if not - Key name will be used. Key is case-senstive.# Value before `||` delimeter is the target link.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, question icon will be loaded.menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemesscheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini# ---------------------------------------------------------------# Sidebar Settings# ---------------------------------------------------------------# Social Links.# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimeter is the target permalink.# Value after `||` delimeter is the name of FontAwesome icon. If icon (with or without delimeter) is not specified, globe icon will be loaded.social: GitHub: https://github.com/yourname || github E-Mail: mailto:yourname@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skypesocial_icons: enable: true icons_only: true transition: true# Blog rollslinks_icon: linklinks_title: Linkslinks_layout: block#links_layout: inline#links: #Title: http://example.com/# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /images/wh724.jpg# Table Of Contents in the Sidebartoc: enable: true # Automatically add list number to toc. number: true # If true, all words will placed on next lines if header width longer then sidebar width. wrap: false# Creative Commons 4.0 International License.# http://creativecommons.org/# Available: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero#creative_commons: by-nc-sa#creative_commons:sidebar: # Sidebar Position, available value: left | right (only for Pisces | Gemini). position: left #position: right # Sidebar Display, available value (only for Muse | Mist): # - post expand on posts automatically. Default. # - always expand for all pages automatically # - hide expand only when click on the sidebar toggle icon. # - remove Totally remove sidebar including sidebar toggle. display: post #display: always #display: hide #display: remove # Sidebar offset from top menubar in pixels (only for Pisces | Gemini). offset: 12 # Back to top in sidebar (only for Pisces | Gemini). b2t: false # Scroll percent label in b2t button. scrollpercent: false # Enable sidebar on narrow view (only for Muse | Mist). onmobile: true# ---------------------------------------------------------------# Post Settings# ---------------------------------------------------------------# Automatically scroll page to section which is under &lt;!-- more --&gt; mark.scroll_to_more: true# Automatically saving scroll position on each post/page in cookies.save_scroll: false# Automatically excerpt description in homepage as preamble text.excerpt_description: false# Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: false length: 150# Post meta display settingspost_meta: item_text: true created_at: true updated_at: false categories: true# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true totalcount: true separated_meta: true# Wechat Subscriberwechat_subscriber: enabled: true qcode: /uploads/wechat.jpg description: subscribe to my blog# Reward#reward_comment: Donate comment here#wechatpay: /images/wechatpay.jpg#alipay: /images/alipay.jpg#bitcoin: /images/bitcoin.png# Declare license on posts转载声明post_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/# ---------------------------------------------------------------# Misc Theme Settings# ---------------------------------------------------------------# Reduce padding / margin indents on devices with narrow width.mobile_layout_economy: false# Android Chrome header panel color ($black-deep).android_chrome_color: &quot;#222&quot;# Custom Logo.# !!Only available for Default Scheme currently.# Options:# enabled: [true/false] - Replace with specific image# image: url-of-image - Images&apos;s urlcustom_logo: enabled: false image:# Code Highlight theme代码高亮主题设置# Available value:# normal | night | night eighties | night blue | night bright# https://github.com/chriskempson/tomorrow-themehighlight_theme: normal# ---------------------------------------------------------------# Font Settings# - Find fonts on Google Fonts (https://www.google.com/fonts)# - All fonts set here will have the following styles:# light, light italic, normal, normal italic, bold, bold italic# - Be aware that setting too much fonts will cause site running slowly# - Introduce in 5.0.1# ---------------------------------------------------------------# CAUTION! Safari Version 10.1.2 bug: https://github.com/iissnan/hexo-theme-next/issues/1844# To avoid space between header and sidebar in Pisces / Gemini themes recommended to use Web Safe fonts for `global` (and `logo`):# Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS# ---------------------------------------------------------------font: enable: false # Uri of fonts host. E.g. //fonts.googleapis.com (Default). host: # Font options: # `external: true` will load this font family from `host` above. # `family: Times New Roman`. Without any quotes. # `size: xx`. Use `px` as unit. # Global font settings used on body element. global: external: true family: Lato size: # Font settings for Headlines (h1, h2, h3, h4, h5, h6). # Fallback to global font settings. headings: external: true family: size: # Font settings for posts. # Fallback to global font settings. posts: external: true family: # Font settings for Logo. # Fallback to global font settings. logo: external: true family: size: # Font settings for and code blocks. codes: external: true family: size:# ---------------------------------------------------------------# Third Party Services Settings# ---------------------------------------------------------------# MathJax Supportmathjax: enable: false per_page: false cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML# Han Support docs: https://hanzi.pro/han: false# Swiftype Search API Key#swiftype_key:# Baidu Analytics IDbaidu_analytics: a452b4c4a1cd7c9a9f62d952a88dc832# Duoshuo ShortName#duoshuo_shortname:# Disqusdisqus: enable: false shortname: count: true# Hypercomments#hypercomments_id:# changyanchangyan: enable: false appid: appkey:# Valine.评论系统# You can get your appid and appkey from https://leancloud.cn# more info please open https://valine.js.orgvaline: enable: true appid: # your leancloud application appid appkey: # your leancloud application appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: Just go go # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail,link # custom comment header pageSize: 10 # pagination size# Support for youyan comments system.# You can get your uid from http://www.uyan.cc#youyan_uid: your uid# Support for LiveRe comments system.# You can get your uid from https://livere.com/insight/myCode (General web site)#livere_uid: your uid# Gitment# Introduction: https://imsun.net/posts/gitment-introduction/# You can get your Github ID from https://api.github.com/users/&lt;Github username&gt;gitment: enable: false mint: true # RECOMMEND, A mint on Gitment, to support count, language and proxy_gateway count: true # Show comments count in post meta area lazy: false # Comments lazy loading with a button cleanly: false # Hide &apos;Powered by ...&apos; on footer, and more language: # Force language, or auto switch by theme github_user: # MUST HAVE, Your Github ID github_repo: # MUST HAVE, The repo you use to store Gitment comments client_id: # MUST HAVE, Github client id for the Gitment client_secret: # EITHER this or proxy_gateway, Github access secret token for the Gitment proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled# Baidu Share# Available value:# button | slide# Warning: Baidu Share does not support https.#baidushare:## type: button# Share# This plugin is more useful in China, make sure you known how to use it.# And you can find the use guide at official webiste: http://www.jiathis.com/.# Warning: JiaThis does not support https.#jiathis: ##uid: Get this uid from http://www.jiathis.com/#add_this_id:# Share#duoshuo_share: true# NeedMoreShare2# This plugin is a pure javascript sharing lib which is useful in China.# See: https://github.com/revir/need-more-share2# Also see: https://github.com/DzmVasileusky/needShareButton# iconStyle: default | box# boxForm: horizontal | vertical# position: top / middle / bottom + Left / Center / Right# networks: Weibo,Wechat,Douban,QQZone,Twitter,Linkedin,Mailto,Reddit,# Delicious,StumbleUpon,Pinterest,Facebook,GooglePlus,Slashdot,# Technorati,Posterous,Tumblr,GoogleBookmarks,Newsvine,# Evernote,Friendfeed,Vkontakte,Odnoklassniki,Mailruneedmoreshare2: enable: false postbottom: enable: true options: iconStyle: default boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook float: enable: true options: iconStyle: default boxForm: horizontal position: middleRight networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook# Google Webmaster tools verification setting# See: https://www.google.com/webmasters/#google_site_verification:# Google Analytics#google_analytics:# Bing Webmaster tools verification setting# See: https://www.bing.com/webmaster/#bing_site_verification:# Yandex Webmaster tools verification setting# See: https://webmaster.yandex.ru/#yandex_site_verification:# CNZZ count#cnzz_siteid:# Application Insights# See https://azure.microsoft.com/en-us/services/application-insights/# application_insights:# Make duoshuo show UA# user_id must NOT be null when admin_enable is true!# you can visit http://dev.duoshuo.com get duoshuo user id.duoshuo_info: ua_enable: true admin_enable: false user_id: 0 #admin_nickname: Author# Post widgets &amp; FB/VK comments settings.# ---------------------------------------------------------------# Facebook SDK Support.# https://github.com/iissnan/hexo-theme-next/pull/410facebook_sdk: enable: false app_id: #&lt;app_id&gt; fb_admin: #&lt;user_id&gt; like_button: #true webmaster: #true# Facebook comments plugin# This plugin depends on Facebook SDK.# If facebook_sdk.enable is false, Facebook comments plugin is unavailable.facebook_comments_plugin: enable: false num_of_posts: 10 # min posts num is 1 width: 100% # default width is 550px scheme: light # default scheme is light (light or dark)# VKontakte API Support.# To get your AppID visit https://vk.com/editapp?act=createvkontakte_api: enable: false app_id: #&lt;app_id&gt; like: true comments: true num_of_posts: 10# Star rating support to each article.# To get your ID visit https://widgetpack.comrating: enable: false id: #&lt;app_id&gt; color: fc6423# ---------------------------------------------------------------# Show number of visitors to each article.显示每篇文章的阅读量# You can visit https://leancloud.cn get AppID and AppKey.leancloud_visitors: enable: false app_id: #&lt;app_id&gt; app_key: #&lt;app_key&gt;# Another tool to show number of visitors to each article.# visit https://console.firebase.google.com/u/0/ to get apiKey and projectId# visit https://firebase.google.com/docs/firestore/ to get more information about firestorefirestore: enable: false collection: articles #required, a string collection name to access firestore database apiKey: #required projectId: #required bluebird: false #enable this if you want to include bluebird 3.5.1(core version) Promise polyfill# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/#不算子统计，用于在页脚显示总访客数和总浏览量，将false改为truebusuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; site_pv_footer: # custom pv span for one page only page_pv: false page_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; page_pv_footer:# Tencent analytics ID# tencent_analytics:# Tencent MTA ID# tencent_mta:# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEObaidu_push: false# Google Calendar# Share your recent schedule to others via calendar page## API Documentation:# https://developers.google.com/google-apps/calendar/v3/reference/events/listcalendar: enable: false calendar_id: &lt;required&gt; api_key: &lt;required&gt; orderBy: startTime offsetMax: 24 offsetMin: 4 timeZone: showDeleted: false singleEvents: true maxResults: 250# Algolia Searchalgolia_search: enable: false hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: &quot;We didn&apos;t find any results for the search: $&#123;query&#125;&quot; hits_stats: &quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;# Local search# Dependencies: https://github.com/flashlab/hexo-generator-searchlocal_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1# ---------------------------------------------------------------# Tags Settings# ---------------------------------------------------------------# External URL with BASE64 encrypt &amp; decrypt.# Usage: &#123;% exturl text url &quot;title&quot; %&#125;# Alias: &#123;% extlink text url &quot;title&quot; %&#125;exturl: false# Note tag (bs-callout).主题的标签样式有note、label、tabs三种note: # Note tag style values: # - simple bs-callout old alert style. Default. # - modern bs-callout new (v2-v3) alert style. # - flat flat callout style with background, like on Mozilla or StackOverflow. # - disabled disable all CSS styles import of note tag. #风格 style: simple #要不要图标 icons: false #圆角矩形 border_radius: 3 # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6). # Offset also applied to label tag variables. This option can work with disabled note tag. light_bg_offset: 0# Label tag.label: true# Tabs tag.tabs: enable: true transition: tabs: false labels: true border_radius: 0#! ---------------------------------------------------------------#! DO NOT EDIT THE FOLLOWING SETTINGS#! UNLESS YOU KNOW WHAT YOU ARE DOING#! ---------------------------------------------------------------# Use velocity to animate everything.motion: enable: true async: false transition: # Transition variants: # fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut # swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut # bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut # slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut # slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut # perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut post_block: fadeIn post_header: slideDownIn post_body: slideDownIn coll_header: slideLeftIn # Only for Pisces | Gemini. sidebar: slideUpIn# Fancyboxfancybox: true# Progress bar in the top during page loading.pace: false# Themes list:#pace-theme-big-counter#pace-theme-bounce#pace-theme-barber-shop#pace-theme-center-atom#pace-theme-center-circle#pace-theme-center-radar#pace-theme-center-simple#pace-theme-corner-indicator#pace-theme-fill-left#pace-theme-flash#pace-theme-loading-bar#pace-theme-mac-osx#pace-theme-minimal# For example# pace_theme: pace-theme-center-simplepace_theme: pace-theme-minimal# Canvas-nestcanvas_nest: false# three_wavesthree_waves: false# canvas_linescanvas_lines: false# canvas_spherecanvas_sphere: false# Only fit scheme Pisces# Canvas-ribbon# size: The width of the ribbon.# alpha: The transparency of the ribbon.# zIndex: The display level of the ribbon.canvas_ribbon: enable: false size: 300 alpha: 0.6 zIndex: -1rencent_posts_title: rencentrecent_posts_layout: blockrecent_posts: true# Script Vendors.# Set a CDN address for the vendor you want to customize.# For example# jquery: https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js# Be aware that you should use the same version as internal ones to avoid potential problems.# Please use the https protocol of CDN files when you enable https on your site.vendors: # Internal path prefix. Please do not edit it. _internal: lib # Internal version: 2.1.3 jquery: # Internal version: 2.1.5 # See: http://fancyapps.com/fancybox/ fancybox: fancybox_css: # Internal version: 1.0.6 # See: https://github.com/ftlabs/fastclick fastclick: # Internal version: 1.9.7 # See: https://github.com/tuupola/jquery_lazyload lazyload: # Internal version: 1.2.1 # See: http://VelocityJS.org velocity: # Internal version: 1.2.1 # See: http://VelocityJS.org velocity_ui: # Internal version: 0.7.9 # See: https://faisalman.github.io/ua-parser-js/ ua_parser: # Internal version: 4.6.2 # See: http://fontawesome.io/ fontawesome: # Internal version: 1 # https://www.algolia.com algolia_instant_js: algolia_instant_css: # Internal version: 1.0.2 # See: https://github.com/HubSpot/pace # Or use direct links below: # pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js # pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css pace: pace_css: # Internal version: 1.0.0 # https://github.com/hustcc/canvas-nest.js canvas_nest: # three three: # three_waves # https://github.com/jjandxa/three_waves three_waves: # three_waves # https://github.com/jjandxa/canvas_lines canvas_lines: # three_waves # https://github.com/jjandxa/canvas_sphere canvas_sphere: # Internal version: 1.0.0 # https://github.com/zproo/canvas-ribbon canvas_ribbon: # Internal version: 3.3.0 # https://github.com/ethantw/Han han: # needMoreShare2 # https://github.com/revir/need-more-share2 needMoreShare2:# Assetscss: cssjs: jsimages: images# Theme versionversion: 5.1.4基础调试浏览器按 F12 即可，建议用Google Chrome 浏览器调试。自定义样式文件 : themes\next\source\css_custom\custom.styl修改文件后直接保存，刷新页面即可查看效果修改文章页宽打开themes/next/source/css/_variables/custom.styl，找到以下字段并修改为合适的宽度：1$content-desktop = 900px修改小型代码块颜色修改\themes\next\source\css\ _variables\base.styl文件，加入自定义颜色：12345678$red = #ff2a2a$blue-bright = #87daff$blue = #0684bd$blue-deep = #262a30$orange = #fc6423// 自定义的颜色+ $my-code-foreground = #dd0055 // 用``围出的代码块字体颜色+ $my-code-background = #eee // 用``围出的代码块背景颜色修改$code-background和$code-foreground的值：Code & Code Blocks12345678$code-font-family = $font-family-monospace$code-font-size = 13px$code-font-size = unit(hexo-config(&apos;font.codes.size&apos;), px) if hexo-config(&apos;font.codes.size&apos;) is a &apos;unit&apos;$code-border-radius = 4px- $code-foreground = $black-light- $code-background = $gainsboro+ $code-background = $my-code-background + $code-foreground = $my-code-foreground修改themes\next\source\css_custom\custom.styl文件，加入自定义样式文章``代码块的自定义样式1234code &#123; margin: 0px 3px; border: 1px solid #999;&#125;修改链接文字样式修改themes\next\source\css_custom\custom.styl文件，加入自定义样式12345678910.post-body p a&#123; color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; &amp;:hover &#123; color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; &#125;&#125;头像设置圆形,停留旋转效果修改themes\next\source\css_common\components\sidebar\sidebar-author.styl,新增以下代码:123456789101112131415.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; //设置圆形+ border-radius: 50%;+ transition: 2s all;&#125; //旋转+ .site-author-image:hover&#123;+ transform: rotate(360deg);+ &#125;文章末尾添加”本文结束”标记修改在themes/next/layout/_macro/post.swig中，在wechat-subscriber.swig之前添加如下代码：123456&lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;---------------- The End ----------------&lt;/div&gt; &#123;% if theme.wechat_subscriber.enabled and not is_index %&#125; &lt;div&gt; &#123;% include &apos;wechat-subscriber.swig&apos; %&#125; &lt;/div&gt; &#123;% endif %&#125;文章末尾追加版权信息增加版权有两种方式修改主题配置文件,搜索post_copyright1234- enable: false+ enable: true license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/如果觉得默认不好看,则可以自定义样式,找到themes/next/layout/_macro/post.swig，在footer之前添加如下代码(添加之前确保已添加样式)：12345678&lt;div&gt; &lt;p id=&quot;div-border-left-red&quot;&gt; &lt;b&gt;本文基于&lt;a target=&quot;_blank&quot; title=&quot;Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)&quot; href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot;&gt; 知识共享署名-相同方式共享 4.0 &lt;/a&gt;国际许可协议发布&lt;/b&gt;&lt;br/&gt; &lt;span&gt; &lt;b&gt;本文地址：&lt;/b&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;&lt;br/&gt;&lt;b&gt;转载请注明出处，谢谢！&lt;/b&gt; &lt;/span&gt; &lt;/p&gt;&lt;/div&gt;侧栏加入已运行的时间修改文件:themes/next/layout/_custom/sidebar.swig，加入一下代码：BirthDay = new Date("07/15/2019 00:00:00"); 日期修改为自己的12345678910111213141516171819202122 &lt;div id=&quot;days&quot;&gt;&lt;/div&gt;&lt;script&gt; function share_data_time() &#123; window.setTimeout(&quot;share_data_time()&quot;, 1000); //毕业时间 BirthDay = new Date(&quot;07/15/2019 00:00:00&quot;); //获取当前时间 today = new Date(); timeold = (today.getTime() - BirthDay.getTime()); //总豪秒数 secondsold = Math.floor(timeold / 1000); //总秒数 e_daysold = timeold / (24 * 60 * 60 * 1000); daysold = Math.floor(e_daysold); //相差天数 e_hrsold = (e_daysold - daysold) * 24; hrsold = Math.floor(e_hrsold); //相差小时数 e_minsold = (e_hrsold - hrsold) * 60; minsold= Math.floor(e_minsold) //相差分钟数 seconds = Math.floor((e_minsold - minsold) * 60); //相差秒数 //将所获取的时间拼接到一起，再把值显示到页面 days.innerHTML = &quot;已运行:&quot; + daysold + &quot;天&quot; + hrsold + &quot;小时&quot; + minsold + &quot;分&quot; + seconds + &quot;秒&quot;; &#125; share_data_time(); &lt;/script&gt;修改文件themes/next/layout/_macro/sidebar.swig中的12345678910111213141516171819&#123;% if theme.links %&#125; &lt;div class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.links_layout | default(&apos;inline&apos;) &#125;&#125;&quot;&gt; &lt;div class=&quot;links-of-blogroll-title&quot;&gt; &lt;i class=&quot;fa fa-fw fa-&#123;&#123; theme.links_icon | default(&apos;globe&apos;) | lower &#125;&#125;&quot;&gt;&lt;/i&gt; &#123;&#123; theme.links_title &#125;&#125;&amp;nbsp; &lt;i class=&quot;fa fa-fw fa-&#123;&#123; theme.links_icon | default(&apos;globe&apos;) | lower &#125;&#125;&quot;&gt;&lt;/i&gt; &lt;/div&gt; &lt;ul class=&quot;links-of-blogroll-list&quot;&gt; &#123;% for name, link in theme.links %&#125; &lt;li class=&quot;links-of-blogroll-item&quot;&gt; &lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; name &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt;##加上 &#123;% include &apos;../_custom/sidebar.swig&apos; %&#125; &lt;/div&gt;&#123;% endif %&#125;##去掉 &#123;% include &apos;../_custom/sidebar.swig&apos; %&#125;在themes\next\source\css_custom\custom.styl添加样式123456#days&#123; display:block; color:#07b38b; font-size:13px; margin-top:15px;&#125;侧栏增加歌曲在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器复制外链iframe代码:1&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=22742146&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;修改文件layout/_macro/sidebar.swig123456789101112131415161718&#123;# Blogroll #&#125;&#123;% if theme.links %&#125; &lt;div class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.links_layout | default(&apos;inline&apos;) &#125;&#125;&quot;&gt; &lt;div class=&quot;links-of-blogroll-title&quot;&gt; &lt;i class=&quot;fa fa-fw fa-&#123;&#123; theme.links_icon | default(&apos;globe&apos;) | lower &#125;&#125;&quot;&gt;&lt;/i&gt; &#123;&#123; theme.links_title &#125;&#125; &lt;/div&gt; &lt;ul class=&quot;links-of-blogroll-list&quot;&gt; &#123;% for name, link in theme.links %&#125; &lt;li class=&quot;links-of-blogroll-item&quot;&gt; &lt;a href=&quot;&#123;&#123; link &#125;&#125;&quot; title=&quot;&#123;&#123; name &#125;&#125;&quot; target=&quot;_blank&quot; rel=&quot;external nofollow&quot;&gt;&#123;&#123; name &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt;## &#123;% include &apos;../_custom/sidebar.swig&apos; %&#125;加上 &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=22742146&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt; &lt;/div&gt;&#123;% endif %&#125;添加最近文章栏目修改themes/next/layout/_macro/sidebar.swig找到theme.social板块代码，在该板块最后的endif后隔一行添加如下代码。123456789101112131415161718&#123;# recent posts #&#125;&#123;% if theme.recent_posts %&#125; &lt;div class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.recent_posts_layout &#125;&#125;&quot;&gt; &lt;div class=&quot;links-of-blogroll-title&quot;&gt; &lt;!-- modify icon to fire by szw --&gt; &lt;i class=&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &#123;&#123; theme.recent_posts_title &#125;&#125; &lt;/div&gt; &lt;ul class=&quot;links-of-blogroll-list&quot;&gt; &#123;% set posts = site.posts.sort(&apos;-date&apos;) %&#125; &#123;% for post in posts.slice(&apos;0&apos;, &apos;5&apos;) %&#125; &lt;li class=&quot;recent_posts_li&quot;&gt; &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt; &lt;/li&gt; &#123;% endfor %&#125; &lt;/ul&gt; &lt;/div&gt;&#123;% endif %&#125;编辑themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl12345678li.recent_posts_li &#123; text-align: cengter; display: block; word-break: keep-all; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;&#125;主题配置文件themes/next/_config.yml,添加如下代码123recent_posts_title: 近期文章recent_posts_layout: blockrecent_posts: true增加文章字数统计及阅读时常功能安装插件hexo-wordcount,执行以下命令:1npm install hexo-wordcount --save修改themes/next/_config.yml主题配置文件，搜索关键字post_wordcount,修改如下:123456post_wordcount: item_text: true wordcount: true #单篇文章字数 min2read: true #单篇阅读时长 totalcount: true #站点总字数 separated_meta: true增加站点访问统计功能next主题默认集成了第三方访问统计插件。修改themes/next/_config.yml主题配置文件，搜索关键字busuanzi_count:12345678910111213141516171819# 不蒜子统计，用于在页脚显示总访客数和总浏览量，将 false 改为 true 就能直接使用busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; site_uv_footer: # custom pv span for the whole site site_pv: true site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; site_pv_footer: # custom pv span for one page only # 页面浏览量，不建议开启，建议用上面的 leancloud_visitors # 首先 leancloud 更稳定，其次 leancloud 便于管理 # 最后，可以利用 leancloud 的 api 建立 TopX 页面 page_pv: false page_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; page_pv_footer:修改themes/next/layout/_third-party/analytics/busuanzi-counter.swig文件，找到dn-lbstatics.qbox.me,修改代码：12&gt; &lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;&gt;博客静态资源压缩优化用hexo生成静态文件时，默认生成的静态文件存在大量空白，而且css、js都未经压缩，这在一定程度上会影响页面的加载，所以在网上所搜有没有办法来优化这些问题？答案肯定是有，当然大部分博客都提到了使用gulp来精简代码，而我今天所要跟大家介绍的是hexo-neat插件 。我为啥不选择gulp而使用hexo-neat呢？因为用gulp需要在每次生成静态文件后，即hexo g后，都要另外执行gulp命令才能压缩静态文件；而使用hexo-neat则无须另外执行其他命令即可自动完成压缩功能，即方便了使用习惯。在站点的根目录下执行以下命令：1npm install hexo-neat --save打开blog/_config.yml全局配置文件添加如下配置：1234567891011121314151617181920212223#静态资源压缩优化# hexo-neatneat_enable: true # 启用neat# 对html优化neat_html: enable: true exclude: # 对css优化neat_css: enable: true exclude: - &apos;*.min.css&apos;# 对js优化neat_js: enable: true mangle: true output: compress: exclude: - &apos;*.min.js&apos;]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>faster rcnn</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[目标检测网络进阶]]></title>
    <url>%2F2019%2F07%2F15%2F%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C%E8%BF%9B%E9%98%B6%2F</url>
    <content type="text"><![CDATA[Fater RCNN改进之旅使用教程：https://www.cnblogs.com/dudumiaomiao/p/6556111.html*解决问题 cannot import name symbol_database ImportError: cannot import name symbol_database https://blog.csdn.net/aBlueMouse/article/details/77744023 运行项目报错no model name _caffe每次执行前必执行在py-faster-rcnn/caffe-faster-rcnn目录下sudo make pycaffe字符编码不正确-- coding：utf-8 --训练stage1 rpn时，出现’numpy.float64’ object cannot be interpreted as an index 的提示错误几乎所有的博客中都指出，需要更换numpy 的版本，照做之后，出现ImportError: numpy.core.multiarray failed to import，这个问题又是numpy不匹配造成的，这样就形成了恶性循环，所以，可以考虑从根源上解决'numpy.float64' object cannot be interpreted as an index。TypeError: 'numpy.float64' object cannot be interpreted as an index/home/xxx/py-faster-rcnn/lib/roi_data_layer/minibatch.py 将第26行：fg_rois_per_image = np.round(cfg.TRAIN.FG_FRACTION * rois_per_image) 改为：fg_rois_per_image = np.round(cfg.TRAIN.FG_FRACTION * rois_per_image).astype(np.int)/home/xxx/py-faster-rcnn/lib/datasets/ds_utils.py 将第12行：hashes = np.round(boxes * scale).dot(v) 改为：hashes = np.round(boxes * scale).dot(v).astype(np.int)/home/xxx/py-faster-rcnn/lib/fast_rcnn/test.py 将第129行： hashes = np.round(blobs['rois'] * cfg.DEDUP_BOXES).dot(v) 改为： hashes = np.round(blobs['rois'] * cfg.DEDUP_BOXES).dot(v).astype(np.int)/home/xxx/py-faster-rcnn/lib/rpn/proposal_target_layer.py 将第60行：fg_rois_per_image = np.round(cfg.TRAIN.FG_FRACTION * rois_per_image) 改为：fg_rois_per_image = np.round(cfg.TRAIN.FG_FRACTION * rois_per_image).astype(np.int)faster rcnn报错TypeError: slice indices must be integers or None or have an index method改的是/home/xiaohua/py-faster-rcnn/lib/roi_data_layer下的minibatch.py文件转到172行，将 for ind in inds: cls = clss[ind] start = 4 * cls end = start + 4 bbox_targets[ind, start:end] = bbox_target_data[ind, 1:] bbox_inside_weights[ind, start:end] = cfg.TRAIN.BBOX_INSIDE_WEIGHTS return bbox_targets, bbox_inside_weights 改为： for ind in inds: ind = int(ind) cls = clss[ind] start = int(4 * cos) end = int(start + 4) bbox_targets[ind, start:end] = bbox_target_data[ind, 1:] bbox_inside_weights[ind, start:end] = cfg.TRAIN.BBOX_INSIDE_WEIGHTS return bbox_targets, bbox_inside_weights 即可，自己注意python语法格式 原文：https://blog.csdn.net/qq_27637315/article/details/78849756 Check failed: error == cudaSuccess (2 vs. 0) out of memory6.显存不足...经过查阅资料:终端输入 nvidia-smi；查看占用显存最大的ID号；kill -9 IDAttributeError: ‘module’ object has no attribute ‘text_format’在文件./lib/fast_rcnn/train.py增加一行import google.protobuf.text_format 即可解决问题 原文：https://blog.csdn.net/qq_33202928/article/details/72526710目标框在图像边缘preFile"/home/gxjun/Qunar/py-faster-rcnn/tools/train_faster_rcnn_alt_opt.py", line67,in get_roidb roidb = get_training_roidb(imdb) File "/home/gxjun/Qunar/py-faster-rcnn/tools/../lib/fast_rcnn/train.py", line118,in get_training_roidb imdb.append_flipped_images() File "/home/gxjun/Qunar/py-faster-rcnn/tools/../lib/datasets/imdb.py", line111,in append_flipped_images assert (boxes[:, 2] >= boxes[:,0]).all() 解决办法：将py-faster-rcnn/lib/datasets/imdb.py中的相应代码改成如下代码即可： def append_flipped_images(self): num_images = self.num_images widths = [PIL.Image.open(self.image_path_at(i)).size[0] for i in xrange(num_images)] for i in xrange(num_images): boxes = self.roidb[i]['boxes'].copy() oldx1 = boxes[:, 0].copy() oldx2 = boxes[:, 2].copy() boxes[:, 0] = widths[i] - oldx2 - 1 boxes[:, 2] = widths[i] - oldx1 - 1 for b in range(len(boxes)): if (boxes[b][2]= boxes[:, 0]).all() 原文：https://blog.csdn.net/u014696921/article/details/60333805文件找不到 Check failed: fd != -1 (-1 vs. -1) Filenotfound: models/pascal_voc/VGG16/faster_rcnn_alt_opt/stage1_rpn_train.pt*** Check failure stack trace: *** 将sovler.txt中的路径设置成绝对路径 error 2：IndexError: list index out of rangeIndexError: list index out of range error2 解决办法： 删除fast-rcnn-master/data/cache文件夹下的.pkl文件，或者改名备份，重新训练即 原文：https://blog.csdn.net/u014696921/article/details/60333805Cannot copy param 0 weights from layer ‘cls_score’; shape mismatchSource param shape is 21 4096 (86016); target param shape is 3 4096 (12288). To learn this layer's parameters from scratch rather than copying from a saved net, rename the layer. 这个错误要把对应的层rename。比如把cls_score改为cls_score1]]></content>
      <categories>
        <category>目标检测</category>
      </categories>
      <tags>
        <tag>faster rcnn</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
</search>
