<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Space Port</title>
  
  <subtitle>welcome to my space station!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/wh724/"/>
  <updated>2019-07-18T08:19:30.513Z</updated>
  <id>https://github.com/wh724/</id>
  
  <author>
    <name>WH</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo+NexT 打造自己的博客</title>
    <link href="https://github.com/wh724/2019/07/18/Hexo+NexT%20%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://github.com/wh724/2019/07/18/Hexo+NexT 打造自己的博客/</id>
    <published>2019-07-18T02:49:08.000Z</published>
    <updated>2019-07-18T08:19:30.513Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 18 2019 16:37:16 GMT+0800 (GMT+08:00) --><center><i>Fater RCNN改进之旅</i></center><image src="/2019/07/18/Hexo+NexT 打造自己的博客/hexo.jpg" alt style="width:100%"><a id="more"></a><h1 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h1><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：Build software better, together 点击GitHub中的New repository创建新仓库，仓库名应该为：用户名.<a href="http://github.io" target="_blank" rel="noopener">http://github.io</a> 这个用户名使用你的GitHub帐号名称代替，这是固定写法，比如我的仓库名为：wh724.github.io。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看廖雪峰老师的Git教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a> 从Git官网下载：Git - Downloading Package 现在的机子基本都是64位的，选择64位的安装包，下载后安装，在命令行里输入git测试是否安装成功，若安装失败，参看其他详细的Git安装教程。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p><p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p><p>git config –global user.name “你的GitHub用户名”<br>git config –global user.email “你的GitHub注册邮箱”<br>生成ssh密钥文件：</p><p>ssh-keygen -t rsa -C “你的GitHub注册邮箱”<br>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p><p>打开GitHub_Settings_keys 页面，新建new SSH Key</p><p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:git@github.com">git@github.com</a> ：</p><p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>Hexo基于Node.js，Node.js下载地址：Download | Node.js 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</p><p>检测npm是否安装成功，在命令行中输入npm -v :</p><p>到这了，安装Hexo的环境已经全部搭建完成。</p><p>安装Hexo</p><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行</p><p>使用npm命令安装Hexo，输入：</p><p>npm install -g hexo-cli</p><p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：</p><p>hexo init blog<br>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p><p>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</p><p>hexo new test_my_site</p><p>hexo g</p><p>hexo s<br>这些命令在后面作介绍，完成后，打开浏览器输入地址：</p><p>localhost:4000</p><p>可以看出我们写出第一篇博客，只不过我下图是我修改过的配置，和你的显示不一样。</p><p>现在来介绍常用的Hexo 命令</p><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p><p>命令简写<br>hexo n “我的博客” == hexo new “我的博客” #新建文章<br>hexo g == hexo generate #生成<br>hexo s == hexo server #启动服务预览<br>hexo d == hexo deploy #部署</p><p>hexo server #Hexo会监视文件变动并自动更新，无须重启服务器<br>hexo server -s #静态模式<br>hexo server -p 5000 #更改端口<br>hexo server -i 192.168.1.1 #自定义 IP<br>hexo clean #清除缓存，若是网页正常情况下可以忽略这条命令</p><p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p><p>推送网站</p><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为站点配置文件，如下图</p><p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件，如下图</p><p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p><p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: master参考如下：</p><p>保存站点配置文件。</p><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p><p>npm install hexo-deployer-git –save</p><p>这时，我们分别输入三条命令：</p><p>hexo clean<br>hexo g<br>hexo d<br>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="http://xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样，参考下图) 比如我的xxxx就是我的GitHub用户名：</p><p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p><p>绑定域名</p><p>虽然在Internet上可以访问我们的网站，但是网址是GitHub提供的:<a href="http://xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样) 而我们想使用我们自己的个性化域名，这就需要绑定我们自己的域名。这里演示的是在阿里云万网的域名绑定，在国内主流的域名代理厂商也就阿里云和腾讯云。登录到阿里云，进入管理控制台的域名列表，找到你的个性化域名，进入解析</p><p>然后添加解析</p><p>包括添加三条解析记录，192.30.252.153是GitHub的地址，你也可以ping你的 <a href="http://xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> 的ip地址，填入进去。第三个记录类型是CNAME，CNAME的记录值是：你的用户名.<a href="http://github.io" target="_blank" rel="noopener">http://github.io</a> 这里千万别弄错了。第二步，登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p><p>点击save保存。第三步，进入本地博客文件夹 ，进入blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。所以建议，不要带有www。这里我还是写了www(不建议带有www):</p><p>保存，命名为CNAME ，注意保存成所有文件而不是txt文件。</p><p>完成这三步，进入blog目录中，按住shift键右击打开命令行，依次输入：</p><p>hexo clean<br>hexo g<br>hexo d<br>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。</p><p>更换主题</p><p>如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：Themes 我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录）打开命令行输入：</p><p>git clone <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a> themes/next<br>这是将Next主题下载到blog目录的themes主题下的next文件夹中。打开站点的_config.yml配置文件，修改主题为next</p><p>打开主题的_config.yml配置文件，不是站点主题文件，找到Scheme Settings</p><p>next主题有三个样式，我用的是Pisces，你们可以自己试试看，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。选择其他主题，按照上述过程即可实现。</p><p>初识Markdown语法</p><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。Markdown语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于html已经算是轻量级语言，像有道云笔记也支持Markdown写作。并且Markdown完全兼容html，也就是可以在文章里直接插入html代码。比如给博文添加音乐，就可以直接把音乐的外链html代码插入文章中。具体语法参看：Markdown 语法说明(简体中文版) 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的Markdown编辑器也是非常重要的，这里推荐MarkPad 和The Markdown Editor for Windows ，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的Markdown的语法与编辑器自己可以搜索了解。</p><p>发布文章</p><p>我们开始正式发布上线博客文章，在命令行中输入：</p><p>hexo n “博客名字”</p><p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 博客名字.md 文件，使用Markdown编辑器打开，就可以开始你的个人博客之旅了，Markdown常用的样式也就十来种，完全能够满足一般博文的样式要求，这是我的一篇博文内容示例：</p><p>通过带有预览样式的Markdown编辑器实时预览书写的博文样式，也可以通过命令 hexo s –debug 在本地浏览器的localhost:4000 预览博文效果。写好博文并且样式无误后，通过hexo g、hexo d 生成、部署网页。随后可以在浏览器中输入域名浏览。</p></image><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jul 18 2019 16:37:16 GMT+0800 (GMT+08:00) --&gt;&lt;center&gt;&lt;i&gt;Fater RCNN改进之旅&lt;/i&gt;&lt;/center&gt;&lt;image src=&quot;/2019/07/18/Hexo+NexT 打造自己的博客/hexo.jpg&quot; alt style=&quot;width:100%&quot;&gt;&lt;/image&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://github.com/wh724/categories/Hexo/"/>
    
    
      <category term="faster rcnn" scheme="https://github.com/wh724/tags/faster-rcnn/"/>
    
      <category term="深度学习" scheme="https://github.com/wh724/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>目标检测网络进阶</title>
    <link href="https://github.com/wh724/2019/07/15/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%BD%91%E7%BB%9C%E8%BF%9B%E9%98%B6/"/>
    <id>https://github.com/wh724/2019/07/15/目标检测网络进阶/</id>
    <published>2019-07-15T11:22:44.000Z</published>
    <updated>2019-07-18T08:41:38.802Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 18 2019 16:42:17 GMT+0800 (GMT+08:00) --><center><i>Fater RCNN改进之旅</i></center><image src="/2019/07/15/目标检测网络进阶/faster_rcnn.png" alt style="width:100%"><a id="more"></a><p><strong>使用教程：<a href="https://www.cnblogs.com/dudumiaomiao/p/6556111.html" target="_blank" rel="noopener">https://www.cnblogs.com/dudumiaomiao/p/6556111.html</a>*<strong></strong></strong></p><h2 id="解决问题-cannot-import-name-symbol-database"><a href="#解决问题-cannot-import-name-symbol-database" class="headerlink" title="解决问题 cannot import name symbol_database"></a>解决问题 cannot import name symbol_database</h2><pre>ImportError: cannot import name symbol_databasehttps://blog.csdn.net/aBlueMouse/article/details/77744023</pre><h2 id="运行项目报错no-model-name-caffe"><a href="#运行项目报错no-model-name-caffe" class="headerlink" title="运行项目报错no model name _caffe"></a>运行项目报错no model name _caffe</h2><p>每次执行前必执行在<code>py-faster-rcnn/caffe-faster-rcnn</code>目录下sudo make pycaffe</p><h2 id="字符编码不正确"><a href="#字符编码不正确" class="headerlink" title="字符编码不正确"></a>字符编码不正确</h2><p>-<em>- coding：utf-8 -</em>-</p><h2 id="训练stage1-rpn时，出现’numpy-float64’-object-cannot-be-interpreted-as-an-index-的提示错误"><a href="#训练stage1-rpn时，出现’numpy-float64’-object-cannot-be-interpreted-as-an-index-的提示错误" class="headerlink" title="训练stage1 rpn时，出现’numpy.float64’ object cannot be interpreted as an index 的提示错误"></a>训练stage1 rpn时，出现’numpy.float64’ object cannot be interpreted as an index 的提示错误</h2><p>几乎所有的博客中都指出，需要更换numpy 的版本，照做之后，出现ImportError: numpy.core.multiarray failed to import，这个问题又是numpy不匹配造成的，这样就形成了恶性循环，所以，可以考虑从根源上解决'numpy.float64' object cannot be interpreted as an index。</p><p>TypeError: 'numpy.float64' object cannot be interpreted as an index</p><pre>/home/xxx/py-faster-rcnn/lib/roi_data_layer/minibatch.py将第26行：fg_rois_per_image = np.round(cfg.TRAIN.FG_FRACTION * rois_per_image)改为：fg_rois_per_image = np.round(cfg.TRAIN.FG_FRACTION * rois_per_image).astype(np.int)</pre><pre>/home/xxx/py-faster-rcnn/lib/datasets/ds_utils.py将第12行：hashes = np.round(boxes * scale).dot(v)改为：hashes = np.round(boxes * scale).dot(v).astype(np.int)</pre><pre>/home/xxx/py-faster-rcnn/lib/fast_rcnn/test.py将第129行： hashes = np.round(blobs['rois'] * cfg.DEDUP_BOXES).dot(v)改为： hashes = np.round(blobs['rois'] * cfg.DEDUP_BOXES).dot(v).astype(np.int)</pre><pre>/home/xxx/py-faster-rcnn/lib/rpn/proposal_target_layer.py将第60行：fg_rois_per_image = np.round(cfg.TRAIN.FG_FRACTION * rois_per_image)改为：fg_rois_per_image = np.round(cfg.TRAIN.FG_FRACTION * rois_per_image).astype(np.int)</pre><h2 id="faster-rcnn报错TypeError-slice-indices-must-be-integers-or-None-or-have-an-index-method"><a href="#faster-rcnn报错TypeError-slice-indices-must-be-integers-or-None-or-have-an-index-method" class="headerlink" title="faster rcnn报错TypeError: slice indices must be integers or None or have an index method"></a>faster rcnn报错TypeError: slice indices must be integers or None or have an <strong>index</strong> method</h2><pre>改的是/home/xiaohua/py-faster-rcnn/lib/roi_data_layer下的minibatch.py文件转到172行，将for ind in inds:cls = clss[ind]start = 4 * clsend = start + 4bbox_targets[ind, start:end] = bbox_target_data[ind, 1:]bbox_inside_weights[ind, start:end] = cfg.TRAIN.BBOX_INSIDE_WEIGHTSreturn bbox_targets, bbox_inside_weights改为：for ind in inds:ind = int(ind)cls = clss[ind]start = int(4 * cos)end = int(start + 4)bbox_targets[ind, start:end] = bbox_target_data[ind, 1:]bbox_inside_weights[ind, start:end] = cfg.TRAIN.BBOX_INSIDE_WEIGHTSreturn bbox_targets, bbox_inside_weights即可，自己注意python语法格式原文：https://blog.csdn.net/qq_27637315/article/details/78849756</pre><h2 id="Check-failed-error-cudaSuccess-2-vs-0-out-of-memory6"><a href="#Check-failed-error-cudaSuccess-2-vs-0-out-of-memory6" class="headerlink" title="Check failed: error == cudaSuccess (2 vs. 0) out of memory6."></a>Check failed: error == cudaSuccess (2 vs. 0) out of memory6.</h2><p>显存不足...经过查阅资料:</p>终端输入 nvidia-smi；查看占用显存最大的ID号；kill -9 ID<h2 id="AttributeError-‘module’-object-has-no-attribute-‘text-format’"><a href="#AttributeError-‘module’-object-has-no-attribute-‘text-format’" class="headerlink" title="AttributeError: ‘module’ object has no attribute ‘text_format’"></a>AttributeError: ‘module’ object has no attribute ‘text_format’</h2><pre>在文件./lib/fast_rcnn/train.py增加一行import google.protobuf.text_format 即可解决问题原文：https://blog.csdn.net/qq_33202928/article/details/72526710</pre><h2 id="目标框在图像边缘"><a href="#目标框在图像边缘" class="headerlink" title="目标框在图像边缘"></a>目标框在图像边缘</h2><pre>preFile"/home/gxjun/Qunar/py-faster-rcnn/tools/train_faster_rcnn_alt_opt.py", line67,in get_roidb    roidb = get_training_roidb(imdb)File "/home/gxjun/Qunar/py-faster-rcnn/tools/../lib/fast_rcnn/train.py", line118,in get_training_roidb    imdb.append_flipped_images()File "/home/gxjun/Qunar/py-faster-rcnn/tools/../lib/datasets/imdb.py", line111,in append_flipped_images    assert (boxes[:, 2] >= boxes[:,0]).all()解决办法：将py-faster-rcnn/lib/datasets/imdb.py中的相应代码改成如下代码即可：def append_flipped_images(self):    num_images = self.num_images    widths = [PIL.Image.open(self.image_path_at(i)).size[0]    for i in xrange(num_images)]        for i in xrange(num_images):        boxes = self.roidb[i]['boxes'].copy()        oldx1 = boxes[:, 0].copy()        oldx2 = boxes[:, 2].copy()        boxes[:, 0] = widths[i] - oldx2 - 1        boxes[:, 2] = widths[i] - oldx1 - 1    for b in range(len(boxes)):        if (boxes[b][2]<boxes [b][0]): boxes[b][0]="0" assert (boxes[:, 2]>= boxes[:, 0]).all()原文：https://blog.csdn.net/u014696921/article/details/60333805</boxes></pre><h2 id="文件找不到"><a href="#文件找不到" class="headerlink" title="文件找不到"></a>文件找不到</h2><pre>Check failed: fd != -1 (-1 vs. -1) Filenotfound: models/pascal_voc/VGG16/faster_rcnn_alt_opt/stage1_rpn_train.pt*** Check failure stack trace: ***将sovler.txt中的路径设置成绝对路径</pre><h2 id="error-2：IndexError-list-index-out-of-range"><a href="#error-2：IndexError-list-index-out-of-range" class="headerlink" title="error 2：IndexError: list index out of range"></a>error 2：IndexError: list index out of range</h2><pre>IndexError: list index out of rangeerror2 解决办法：删除fast-rcnn-master/data/cache文件夹下的.pkl文件，或者改名备份，重新训练即原文：https://blog.csdn.net/u014696921/article/details/60333805</pre><h2 id="Cannot-copy-param-0-weights-from-layer-‘cls-score’-shape-mismatch"><a href="#Cannot-copy-param-0-weights-from-layer-‘cls-score’-shape-mismatch" class="headerlink" title="Cannot copy param 0 weights from layer ‘cls_score’; shape mismatch"></a>Cannot copy param 0 weights from layer ‘cls_score’; shape mismatch</h2><pre>Source param shape is 21 4096 (86016); target param shape is 3 4096(12288). To learn this layer's parameters from scratch rather thancopying from a saved net, rename the layer.这个错误要把对应的层rename。比如把cls_score改为cls_score1</pre></image><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Jul 18 2019 16:42:17 GMT+0800 (GMT+08:00) --&gt;&lt;center&gt;&lt;i&gt;Fater RCNN改进之旅&lt;/i&gt;&lt;/center&gt;&lt;image src=&quot;/2019/07/15/目标检测网络进阶/faster_rcnn.png&quot; alt style=&quot;width:100%&quot;&gt;&lt;/image&gt;
    
    </summary>
    
      <category term="目标检测" scheme="https://github.com/wh724/categories/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
    
      <category term="faster rcnn" scheme="https://github.com/wh724/tags/faster-rcnn/"/>
    
      <category term="深度学习" scheme="https://github.com/wh724/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
